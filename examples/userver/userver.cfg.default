# ----------------------------------------------------------------------------------------------------------------------------------------
# userver - configuration parameters
# ----------------------------------------------------------------------------------------------------------------------------------------
# USE_IPV6      flag to indicate use of ipv6
# SERVER        host name or ip address for the listening socket
# PORT          port number             for the listening socket
# SOCKET_NAME   file name               for the listening socket
# IP_ADDRESS    public ip address of host for the interface connected to the Internet (autodetected if not specified)
# ALLOWED_IP    client address IP-based access control (IPADDR[/MASK])
#
# USE_TCP_OPTIMIZATION  flag indicating the use of TCP/IP options to optimize data transmission (NODELAY, DEFER_ACCEPT, QUICKACK)
#
# PID_FILE      write pid on file indicated
# WELCOME_MSG   message of welcome to send initially to client
# RUN_AS_USER   downgrade security to that user account
# DOCUMENT_ROOT The directory out of which you will serve your documents
#
# LOG_FILE      locations for file log
# LOG_FILE_SZ   memory size for file log
# LOG_MSG_SIZE  limit length of print network message to LOG_MSG_SIZE chars (default 128)
#
# PLUGIN        list of plugins to load, a flexible way to add specific functionality to the server
# PLUGIN_DIR    directory of plugins to load
#
# REQ_TIMEOUT   timeout for request from client
# CGI_TIMEOUT   timeout for cgi execution
#
# MAX_KEEP_ALIVE Specifies the maximum number of requests that can be served through a Keep-Alive (Persistent) session.
#                (Value <= 1 will disable Keep-Alive)
#
# CERT_FILE     certificate of server
# KEY_FILE      private key of server
# PASSWORD      password for private key of server
# CA_FILE       locations of trusted CA certificates used in the verification
# CA_PATH       locations of trusted CA certificates used in the verification
#
# VERIFY_MODE   mode of verification (SSL_VERIFY_NONE=0, SSL_VERIFY_PEER=1, SSL_VERIFY_FAIL_IF_NO_PEER_CERT=2, SSL_VERIFY_CLIENT_ONCE=4)
# ----------------------------------------------------------------------------------------------------------------------------------------
# how to verify peer certificates. The possible values of this setting are:
#
# SSL_VERIFY_NONE                 - do not verify anything
# SSL_VERIFY_PEER                 - verify the peer certificate, if one is presented
# SSL_VERIFY_FAIL_IF_NO_PEER_CERT - require a peer certificate, fail if one is not presented
#
# SSL/TLS servers will usually set VERIFY_MODE to SSL_VERIFY_NONE.
# SSL/TLS clients will usually set VERIFY_MODE to SSL_VERIFY_FAIL_IF_NO_PEER_CERT.
# ----------------------------------------------------------------------------------------------------------------------------------------
#
# PREFORK_CHILD number of child server processes created at startup ( 0 - serialize, no forking
#                                                                     1 - classic, forking after accept client)
#                                                                    >1 - pool of process serialize plus monitoring process)
# ----------------------------------------------------------------------------------------------------------------------------------------

userver {

# USE_IPV6       no
# SERVER         localhost
# PORT           80
# SOCKET_NAME    tmp/socket
# IP_ADDRESS     10.30.1.131
# ALLOWED_IP     127.0.0.1,10.30.0.0/16

  USE_TCP_OPTIMIZATION yes

  PID_FILE       /var/run/userver.pid
# WELCOME_MSG    "220 david.unirel.intranet ULib WEB server (Version 1.0.5) ready.\n"
# RUN_AS_USER    apache
  DOCUMENT_ROOT  /var/www/localhost/htdocs

  LOG_FILE       /var/log/userver.log
  LOG_FILE_SZ    1M
  LOG_MSG_SIZE   -1

  PLUGIN                     mod_http
# PLUGIN         "mod_tsa    mod_http"
# PLUGIN         "mod_rpc    mod_http"
# PLUGIN         "mod_soap   mod_http"
# PLUGIN         "mod_fcgi   mod_http"
# PLUGIN         "mod_proxy  mod_http"
# PLUGIN         "mod_geoip  mod_http"
# PLUGIN         "mod_stream mod_http"

# PLUGIN_DIR     /usr/local/libexec/ulib

  REQ_TIMEOUT     5
  CGI_TIMEOUT    60

  MAX_KEEP_ALIVE 1024

# CERT_FILE      ../ulib/CA/server.crt
#  KEY_FILE      ../ulib/CA/server.key
# PASSWORD       stefano
# CA_PATH        ../ulib/CA/CApath
# CA_FILE        ../ulib/CA/cacert.pem
# VERIFY_MODE    1

  PREFORK_CHILD  3
}

# ------------------------------------------------------------------------------------------------------------------------------------------
# mod_http - plugin parameters
# ------------------------------------------------------------------------------------------------------------------------------------------
# ALIAS                      vector of URI redirection (request -> alias)
#
# CACHE_FILE_MASK            mask (DOS regexp) of pathfile that be cached in memory
# CACHE_FILE_COMPRESS_MASK   mask (DOS regexp) of suffix files that be cached in memory also compressed
#
#
# VIRTUAL_HOST               flag to activate practice of maintaining more than one server on one machine,
#                            as differentiated by their apparent hostname 
# DIGEST_AUTHENTICATION      flag authentication method (yes = digest, no = basic)
#
# URI_PROTECTED_MASK         mask (DOS regexp) of URI protected from prying eyes
# URI_PROTECTED_ALLOWED_IP   list of comma separated client address for IP-based access control (IPADDR[/MASK]) for URI_PROTECTED_MASK
#
# URI_REQUEST_CERT_MASK      mask (DOS regexp) of URI where client must comunicate a certificate in the SSL connection
# ------------------------------------------------------------------------------------------------------------------------------------------

mod_http {

   # ALIAS: Allows you to tell clients about documents that used to exist in your server's namespace, but do not anymore.
   #        The client will make a request for the document at its new location
   [
#  /login  /RA/cgi-bin/login.sh
#  /admin  /RA/admin/cgi-bin/card-generation.sh
   ]

# CACHE_FILE_MASK            *.html|favicon.ico|css/*.css|js/*.js/icons/*.gif
# CACHE_FILE_COMPRESS_MASK   .html|.ico|.css|.js
#
# VIRTUAL_HOST          yes
# DIGEST_AUTHENTICATION yes
#
# URI_PROTECTED_MASK        /RA/admin/cgi-bin/*
# URI_PROTECTED_ALLOWED_IP  127.0.0.1,10.30.0.0/16
#
# URI_REQUEST_CERT_MASK     /wi-auth/cgi-bin/cpe.sh
}

# -----------------------------------------------------------------------------------------------
# mod_fcgi - plugin parameters
# -----------------------------------------------------------------------------------------------
# FCGI_URI_MASK  mask (DOS regexp) of uri type that send request via FCGI (*.php)
#
# SOCKET_NAME    name file for the listening socket
#
# USE_IPV6       flag to indicate use of ipv6
# SERVER         host name or ip address for server
# PORT           port number for the server
#
# RES_TIMEOUT    timeout for response from server FCGI
# FCGI_KEEP_CONN If not zero, the server FCGI does not close the connection after
#                responding to request; the plugin retains responsibility for the connection
#
#
# LOG_FILE       location for file log (use server log if same value)
# -----------------------------------------------------------------------------------------------
#
# mod_fcgi {
#
# FCGI_URI_MASK *.php
#
# SOCKET_NAME   tmp/fcgi.socket
#
# SERVER        127.0.0.1
# PORT          8080
#
# RES_TIMEOUT    20
# FCGI_KEEP_CONN yes
#
# LOG_FILE      /var/log/userver.log
# }
 
# -----------------------------------------------------------------------------------------------
# mod_tsa - plugin parameters
# -----------------------------------------------------------------------------------------------
# COMMAND      command to execute
# ENVIRONMENT  environment for command to execute
# -----------------------------------------------------------------------------------------------

# mod_tsa {

   # ENV[HOME]         = Base directory for op
   # ENV[OPENSSL]      = Openssl path
   # ENV[OPENSSL_CNF]  = Openssl configuration
   # ENV[ENGINE]       = Openssl Engine to use
   # ENV[PASSWORD]     = Password for key decryption
   # ENV[TSA_CACERT]   = TSA CA chain certificate
   # ENV[TSA_CERT]     = TSA certificate
   # ENV[TSA_KEY]      = TSA private key
   # ENV[FILE_LOG]     = Log file for command
   # ENV[MSG_LOG]      = Log separator
   # ENV[TMPDIR]       = Temporary directory
   # ENV[DEBUG]        = Enable debugging

#  ENVIRONMENT  "HOME=TSA \
#                OPENSSL=bin/openssl \
#                OPENSSL_CNF=CA/openssl.cnf \
#                TSA_CACERT=CA/cacert.pem \
#                TSA_CERT=CA/server.crt \
#                TSA_KEY=CA/server.key"

   # ARGV[1] = TSA REQUEST
   # ARGV[2] = TOKEN
   # ARGV[3] = SEC
   # ARGV[3] = POLICY

#  COMMAND  TSA/TSA_command/tsa_REPLY_BIN.sh
# }

# ------------------------------------------------------------------------------------------------------------------------------------------------
# mod_stream - plugin parameters
# ------------------------------------------------------------------------------------------------------------------------------------------------
# COMMAND                      command to execute
# ENVIRONMENT  environment for command to execute
#
# URI_PATH     specifies the local part of the URL path at which you would like the content to appear (Ex. /my/video.ogv)
# METADATA     specifies the needs to have setup headers prepended for each codec stream (Ex. /my/audio.ogg)
# CONTENT_TYPE specifies the Internet media type of the stream, which will appear in the Content-Type HTTP response header
# ------------------------------------------------------------------------------------------------------------------------------------------------

# mod_stream {

#  ENVIRONMENT   "\"UTRACE=0 5M 0\""
#  COMMAND       my_stream.sh

#  URI_PATH      /my/stream
#  METADATA      /tmp/metadata
#  CONTENT_TYPE  text/plain
#  CONTENT_TYPE  "multipart/x-mixed-replace; boundary=++++++++"
# }

# ------------------------------------------------------------------------------------------------------------------------------------------------
# mod_socket - plugin parameters
# ------------------------------------------------------------------------------------------------------------------------------------------------
# COMMAND                      command to execute
# ENVIRONMENT  environment for command to execute
#
# USE_SIZE_PREAMBLE  use last specification (http://www.whatwg.org/specs/web-socket-protocol/)
# ------------------------------------------------------------------------------------------------------------------------------------------------
#
# mod_socket {
#
#  ENVIRONMENT   "\"UTRACE=0 5M 0\""
#  COMMAND       my_websocket.sh
#
#  USE_SIZE_PREAMBLE  yes
# }

# ------------------------------------------------------------------------------------------------------
# mod_rpc - plugin parameters
# ------------------------------------------------------------------------------------------------------
# METHOD_NAME    name of method
# COMMAND        command to execute
# ENVIRONMENT    environment for command to execute
# RESPONSE_TYPE  input/output type of the command (      success_or_failure     |
#                                                  stdin_success_or_failure     |
#                                                        standard_output        |
#                                                  stdin_standard_output        |
#                                                        standard_output_binary |
#                                                  stdin_standard_output_binary )
# ------------------------------------------------------------------------------------------------------

# mod_rpc  {

   # SOAP or RPC services
   # ------------------------------------------------------------------------------------------------------
   # ENV[HOME]      = Base directory for op
   # ENV[FILE_LOG]  = Log file for command
   # ENV[MSG_LOG]   = Log separator
   # ENV[DEBUG]     = Enable debugging
   # ------------------------------------------------------------------------------------------------------

#  Method_01 {

   # activate a card and send back login/pwd via SMS
   # SMS from client = stringa "From: xxxx\nTo: xxxxx..." input

#  METHOD_NAME CARD

   # ENV[LDAP_HOST]     = LDAP Host
   # ENV[LDAP_PASSWORD] = file contenente password for LDAP binding
   # ENV[MAIL_TO]       = Email Address for workflow
   # ENV[MAIL_FROM]     = Email Address for workflow

#  ENVIRONMENT    "HOME=WAGSM \
#                  DEBUG=1 \
#                  LDAP_HOST=rosso \
#                  LDAP_PASSWORD=unwired-portal_rootdn.pw \
#                  MAIL_TO=card-activation@auth.t-unwired.com \
#                  MAIL_FROM=gsmbox@auth.t-unwired.com"

#  COMMAND        WAGSM/WAGSM_command/card_activation.sh

#  RESPONSE_TYPE  standard_output
#  }
# }

# ------------------------------------------------------------------------------------------------------
# mod_soap - plugin parameters
# ------------------------------------------------------------------------------------------------------
# METHOD_NAME    name of method
# COMMAND        command to execute
# ENVIRONMENT    environment for command to execute
# RESPONSE_TYPE  input/output type of the command (      success_or_failure     |
#                                                  stdin_success_or_failure     |
#                                                        standard_output        |
#                                                  stdin_standard_output        |
#                                                        standard_output_binary |
#                                                  stdin_standard_output_binary )
# ------------------------------------------------------------------------------------------------------

# mod_soap {

   # SOAP or RPC services
   # ------------------------------------------------------------------------------------------------------
   # ENV[HOME]      = Base directory for op
   # ENV[FILE_LOG]  = Log file for command
   # ENV[MSG_LOG]   = Log separator
   # ENV[DEBUG]     = Enable debugging
   # ------------------------------------------------------------------------------------------------------

#  Method_01 {

   # activate a card and send back login/pwd via SMS
   # SMS from client = stringa "From: xxxx\nTo: xxxxx..." input

#  METHOD_NAME CARD

   # ENV[LDAP_HOST]     = LDAP Host
   # ENV[LDAP_PASSWORD] = file contenente password for LDAP binding
   # ENV[MAIL_TO]       = Email Address for workflow
   # ENV[MAIL_FROM]     = Email Address for workflow

#  ENVIRONMENT    "HOME=WAGSM \
#                  DEBUG=1 \
#                  LDAP_HOST=rosso \
#                  LDAP_PASSWORD=unwired-portal_rootdn.pw \
#                  MAIL_TO=card-activation@auth.t-unwired.com \
#                  MAIL_FROM=gsmbox@auth.t-unwired.com"

#  COMMAND        WAGSM/WAGSM_command/card_activation.sh

#  RESPONSE_TYPE  standard_output
#  }
# }

# ---------------------------------------------------------------------------------------------------------------------------------
# mod_proxy - plugin parameters
# ---------------------------------------------------------------------------------------------------------------------------------
# ERROR MESSAGE      Allows you to tell clients about what type of error occurred
#
# URI                uri trigger
# HOST               name host client
# METHOD_NAME        what type of HTTP method is considered (GET|HEAD|POST)
# CLIENT_CERTIFICATE if yes client must comunicate a certificate in the SSL connection
# PORT               port of server for connection
# SERVER             name of server for connection
# COMMAND            command to execute
# ENVIRONMENT        environment for command to execute
# RESPONSE_TYPE      output type of the command (yes = response for client, no = request to server)
# FOLLOW_REDIRECTS   if yes manage to automatically follow redirects from server
# USER               if       manage to follow redirects, in response to a HTTP_UNAUTHORISED response from the HTTP server: user
# PASSWORD           if       manage to follow redirects, in response to a HTTP_UNAUTHORISED response from the HTTP server: password
# REPLACE_RESPONSE   if NOT manage to follow redirects, vector of substitution string
# ---------------------------------------------------------------------------------------------------------------------------------

# mod_proxy {

   # ---------------------------------------------------------------------------
   # ERROR MESSAGE: Allows you to tell clients about what type of error occurred
   # ---------------------------------------------------------------------------
#[ ##include mod_proxy_err_msg.cfg
### ERROR_PARSE_REQUEST
#STRING   "HTTP/1.1 400 Bad Request\r\n\
#Date: %D\r\n\
#Server: ULib/1.0\r\n\
#Connection: close\r\n\
#Content-Type: text/html; charset=iso-8859-1\r\n\
#Content-Length: 238\r\n\
#\r\n\
#<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\r\n\
#<html><head>\r\n\
#<title>Accesso negato</title>\r\n\
#</head><body>\r\n\
#<h1>Bad Request</h1>\r\n\
#<p>Errore parsing header<br />\r\n\
#</p>\r\n\
#<hr>\r\n\
#<address>ULib Server (mod_proxy)</address>\r\n\
#</body></html>\r\n"
#
### ERROR_A_BAD_HEADER
#
### ERROR_A_X509_MISSING_CRT
#
### ERROR_A_X509_REJECTED
#FILE  error_msg/X509_REJECTED
#
### ERROR_A_X509_TAMPERED
#
### ERROR_A_X509_NOBASICAUTH
#]
#
#  Service_WAYF {

   # URI         ^/(WAYF/?|SWITCHaai/images/.*\.gif$)
   # HOST        localhost:444
   # METHOD_NAME GET|POST

   # CLIENT_CERTIFICATE yes

   # PORT     80
   # SERVER   localhost

   # la redirect chiede di nuovo al proxy (444)...!!!
   # FOLLOW_REDIRECTS  no
#  }

#  Service_IDP {

#  URI         ^/shibboleth-idp/SSO
#  HOST        localhost:444
#  METHOD_NAME GET

#  PORT     80
#  SERVER   laptop

#  FOLLOW_REDIRECTS yes

   # In response to a HTTP_UNAUTHORISED response from the HTTP server,
   # obtain a user and password for the scheme/realm returned from the HTTP server
#  USER     user01
#  PASSWORD stefano1
#  }
# }

# ------------------------------------------------------------------------------------------------------------------------------------------
# mod_geoip - plugin parameters
# ------------------------------------------------------------------------------------------------------------------------------------------
# COUNTRY_FORBIDDEN_MASK  mask (DOS regexp) of GEOIP country code that give forbidden access
# ------------------------------------------------------------------------------------------------------------------------------------------

# mod_geoip {

# COUNTRY_FORBIDDEN_MASK CN|JP
# }
