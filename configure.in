# configure.in -- Process this file with autoconf to produce configure
#
# An autoconf script to automatically configure ULib.
#
# Process this file with autoconf to produce a configure script.
#
AC_PREREQ(2.65)

#
# The autoconf documentation states that this is the recommended sequence for this file:
#
#  `AC_INIT(FILE)'
#
#  checks for programs
#  checks for libraries
#  checks for header files
#  checks for typedefs
#  checks for structures
#  checks for variables
#  checks for compiler characteristics
#  checks for library functions
#  checks for system services
#  `AC_OUTPUT([FILE...])'

# SECTION 1: `AC_INIT(FILE)'
#
# This macro must be the very first invoked.
# Its argument names a file that must exist in the directory where autoconf will run, just to check things

# OLD: Every other copy of the package version number gets its value from here
#AC_INIT(include/ulib/internal/common.h)
#AM_INIT_AUTOMAKE(ULib, [$VERSION])

AC_INIT(ULib, [1.1.0], [stefano.casazza@gmail.com])
AC_CONFIG_SRCDIR([include/ulib/internal/common.h])
AC_CONFIG_AUX_DIR(autoconf)

#AC_DEFINE_UNQUOTED(PACKAGE_TARNAME, "ULib", [package tar name])
#AC_SUBST(PACKAGE_TARNAME)

# define a msg macro...
define(TWOCAN_CONF_MSG,[
AC_MSG_RESULT()
AC_MSG_RESULT(${T_MD}$1:${T_ME})
])

# Scary shtool stuff... borowed from pth-1.0
if test ".`echo dummy $@ | grep help`" = .; then
    ac_shtool="$srcdir/shtool"
    PLATFORM=`$ac_shtool platform`
    T_MD="`$ac_shtool echo -n -e %B 2>/dev/null`"
    T_ME="`$ac_shtool echo -n -e %b 2>/dev/null`"
    echo "Platform: ${T_MD}${PLATFORM}${T_ME}"
    echo "Configuring ${T_MD}ULib${T_ME} (C++ Library)"
fi

TWOCAN_CONF_MSG(Initial phase)

# Check what platform we are running on.
AC_CANONICAL_SYSTEM
# pick a newer and better tar implementation like tar-pax
AM_INIT_AUTOMAKE([1.6 no-define tar-pax])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# Versioning
VERSION="1.1.0"
#shared library versioning
GENERIC_LIBRARY_VERSION=1:0:5
#                       | | |
#                +------+ | +---+
#                |        |     |
#             current:revision:age
#                |        |     |
#                |        |     +- increment if interfaces have been added
#                |        |        set to zero if interfaces have been removed or changed
#                |        +- increment if source code has changed
#                |           set to zero if current is incremented
#                +- increment if interfaces have been added, removed or changed
AC_SUBST(GENERIC_LIBRARY_VERSION)

AC_USE_SYSTEM_EXTENSIONS

dnl this is a C++ library after all..
AC_LANG(C++)

dnl Initial CFLAGS
AC_MSG_CHECKING(initial CFLAGS)
AC_MSG_RESULT($CFLAGS)

AC_CONFIG_MACRO_DIR([m4])

# Generate a header file with all settings, a config.h file (Automake will add -DHAVE_CONFIG_H)
AM_CONFIG_HEADER(include/ulib/internal/config.h)

# SECTION 2: checks for programs

TWOCAN_CONF_MSG(Checking for programs)

AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP

# Check for the compiler support

if test "${ac_cv_c_compiler_gnu}" = "yes" ; then
	# We don't want gcc 2.7
	AC_MSG_CHECKING([for a supported version of gcc])
	gcc_version=`${CC} -dumpversion`
	case "${gcc_version}" in
		2.7.*)
		AC_MSG_RESULT([no (${gcc_version})])
		AC_MSG_ERROR([please use a more recent (>= gcc-2.95) version of gcc])
		;;
		*)
		AC_MSG_RESULT([ok (${gcc_version})])
		;;
	esac
#else
#  AC_MSG_ERROR([ULib relies on GCC to be compiled])
fi

# SECTION 2: Configure script command line options

# Updating library version information
# ==========================================================================================================
# If you want to use libtool's versioning system, then you must specify the version information to libtool
# using the `-version-info' flag during link mode (Note: Link mode)
#
# This flag accepts an argument of the form `CURRENT[:REVISION[:AGE]]'. So, passing `-version-info 3:12:1' sets CURRENT to 3, REVISION to 12, and AGE to 1
#
# If either REVISION or AGE are omitted, they default to 0. Also note that AGE must be less than or equal to the CURRENT interface number.
#
# Here are a set of rules to help you update your library version information:
#
#  1. Start with version information of `0:0:0' for each libtool library.
#
#  2. Update the version information only immediately before a public
#     release of your software.  More frequent updates are unnecessary,
#     and only guarantee that the current interface number gets larger
#     faster.
#
#  3. If the library source code has changed at all since the last
#     update, then increment REVISION (`C:R:A' becomes `C:r+1:A').
#
#  4. If any interfaces have been added, removed, or changed since the
#     last update, increment CURRENT, and set REVISION to 0.
#
#  5. If any interfaces have been added since the last public release,
#     then increment AGE.
#
#  6. If any interfaces have been removed since the last public release,
#     then set AGE to 0.
#
#   *NEVER* try to set the interface numbers so that they correspond to the release number of your package. This is an abuse that only
#   fosters misunderstanding of the purpose of library versions. Instead, use the `-release' flag (Note: Release numbers), but be warned
#   that every release of your package will not be binary compatible with any other release.
# ==========================================================================================================

# By default, this macro turns on shared libraries if they are available, and also enables static libraries
# if they don't conflict with the shared libraries. You can modify these defaults by calling either the
# `AC_DISABLE_SHARED' or `AC_DISABLE_STATIC' macros:

dnl Initialize Libtool
m4_ifdef([LT_INIT],
  [LT_INIT([dlopen shared static win32-dll])],
  [AC_LIBTOOL_DLOPEN
   AC_LIBTOOL_WIN32_DLL
   ])

TWOCAN_CONF_MSG(Common C++ checks)

# Common C++
OST_PROG_CC_POSIX
OST_PROG_COMMON
OST_PROJ_LIBRARY(ULIB,[$VERSION],1:0:0)
OST_AUTOMAKE_MODE
OST_MAINTAINER_MODE
OST_WIN32
OST_CC_FCNTL
OST_CC_SYSTIME
OST_CC_TYPES
OST_CC_ENDIAN
OST_CC_SIGNAL
OST_CC_STRING
OST_LIB_REENTRANT
OST_LIB_POLL
OST_SYS_SOCKET
OST_DEBUG
OST_CC_GETOPT

dnl ********************************************************
dnl * Options to pass to libtool
dnl ********************************************************

LIBRARY_LIBTOOL_OPTIONS="$LT_ULIB_VERSION"
MODULE_LIBTOOL_OPTIONS="-export-dynamic -avoid-version"

# check for cross compiling
if test "$cross_compiling" = "yes"; then
	CROSS_ENVIRONMENT=$STAGING_DIR
	PKG_CONFIG_PATH=${CROSS_ENVIRONMENT}/usr/lib/pkgconfig
	TWOCAN_CONF_MSG(Build for Target <${target}> with Environment <${CROSS_ENVIRONMENT}>)
	AM_CONDITIONAL(CROSS_COMPILING, true)
else
	AM_CONDITIONAL(CROSS_COMPILING, false)
	PKG_CONFIG_PATH=`pkg-config --variable pc_path pkg-config`
fi

os_version=`uname -a`
AC_DEFINE_UNQUOTED(_OS_VERSION, "${os_version}", [Operating System version])
AC_MSG_CHECKING([for a supported OS])
case "$target_os" in
	*linux*)
	AC_MSG_RESULT([ok (${target_os})])

	# Ok, this is linux. Check the kernel version
	AC_MSG_CHECKING([for the kernel version])

	kernel=`uname -r`

	case "${kernel}" in
		4.*)
		AC_MSG_RESULT([4 family (${kernel})])
#		AC_DEFINE([KERNEL_4], 1, [Define to 1 if you're using Linux 4.x])
		;;

		3.*)
		AC_MSG_RESULT([3 family (${kernel})])
#		AC_DEFINE([KERNEL_3], 1, [Define to 1 if you're using Linux 3.x])
		;;

		2.6.*)
		AC_MSG_RESULT([2.6 family (${kernel})])
#		AC_DEFINE([KERNEL_2_6], 1, [Define to 1 if you're using Linux 2.6.x])
		;;

		2.4.*)
		AC_MSG_RESULT([2.4 family (${kernel})])
#		AC_DEFINE([KERNEL_2_4], 1, [Define to 1 if you're using Linux 2.4.x])
		;;

		*)
		AC_MSG_RESULT([unsupported (${kernel})])
		AC_MSG_ERROR([ULib works on kernels 2.4,2.6,3])
		;;
	esac

	AM_CONDITIONAL(LINUX, true)
	AM_CONDITIONAL(MINGW, false)
	AM_CONDITIONAL(CYGWIN, false)
	AM_CONDITIONAL(SOLARIS, false)
	;;

	mingw32*)
	AC_MSG_RESULT([ok (${target_os})])

   CPPFLAGS="${CPPFLAGS} -D__USE_CRTIMP"

	if test "$enable_static" = "yes"; then
		AC_MSG_WARN([Disabling static library build, must build as DLL on Windows])
		enable_static=no
	fi
	if test "$enable_shared" = "no"; then
		AC_MSG_WARN([Enabling shared library build, must build as DLL on Windows])
	fi
	enable_shared=yes
	# with WINE don't work...
	ac_cv_func_getopt_long=no

	AC_CHECK_TOOL(WINDRES, windres, no)
	if test "$WINDRES" = no; then
		AC_MSG_ERROR([*** Could not find an implementation of windres in your PATH])
	fi
	AC_CHECK_PROG(ms_librarian, lib.exe, yes, no)

	# We currently use .def files on Windows
	# Note that -module isn't included here since automake needs to see it to know
	# that something like mod_http.la is a valid libtool archive
	LIBRARY_LIBTOOL_OPTIONS="$LIBRARY_LIBTOOL_OPTIONS -no-undefined"
	 MODULE_LIBTOOL_OPTIONS=" $MODULE_LIBTOOL_OPTIONS -no-undefined"

	AM_CONDITIONAL(LINUX, false)
	AM_CONDITIONAL(MINGW, true)
	AM_CONDITIONAL(CYGWIN, false)
	AM_CONDITIONAL(SOLARIS, false)
	;;

	cygwin*)
	AC_MSG_RESULT([ok (${target_os})])

	AM_CONDITIONAL(LINUX, false)
	AM_CONDITIONAL(MINGW, false)
	AM_CONDITIONAL(CYGWIN, true)
	AM_CONDITIONAL(SOLARIS, false)
	;;

	*solaris*)
	AC_MSG_RESULT([ok (${target_os})])

	AM_CONDITIONAL(LINUX, false)
	AM_CONDITIONAL(MINGW, false)
	AM_CONDITIONAL(CYGWIN, false)
	AM_CONDITIONAL(SOLARIS, true)
	;;

	*)
	AC_MSG_RESULT([no (${target_os})])

	AM_CONDITIONAL(LINUX, false)
	AM_CONDITIONAL(MINGW, false)
	AM_CONDITIONAL(CYGWIN, false)
	AM_CONDITIONAL(SOLARIS, false)
	;;
esac

AM_CONDITIONAL(MS_LIB_AVAILABLE, test x$ms_librarian = xyes)

AC_PROG_LIBTOOL

AC_SUBST(LIBRARY_LIBTOOL_OPTIONS)
AC_SUBST( MODULE_LIBTOOL_OPTIONS)

# C++ stuff must done after library and header (some C++ define require some header)

TWOCAN_CONF_MSG(C++ stuff)

# NB: for define macro USING for namespace...
OST_CXX_NAMESPACE
OST_CXX_NEW_INIT

#OST_CXX_PROGRAMMING
#OST_CXX_IOSTREAM
#OST_CXX_MUTABLE
#OST_SGI_STLPORT
#OST_CXX_NOEXCEPTIONS

dnl initialize all the info variables to 'no'
      ulib_ssl_msg="no (--with-ssl)"
      ulib_ssh_msg="no (--with-ssh)"
     ulib_pcre_msg="no (--with-pcre)"
     ulib_ldap_msg="no (--with-ldap)"
     ulib_libz_msg="no (--with-libz)"
     ulib_curl_msg="no (--with-curl)"
    ulib_expat_msg="no (--with-expat)"
    ulib_magic_msg="no (--with-magic)"
   ulib_parser_msg="no (--with-parser)"
    ulib_mysql_msg="no (--with-mysql)"
  ulib_libuuid_msg="no (--with-libuuid)"
 ulib_libevent_msg="no (--with-libevent)"
  ulib_libxml2_msg="no (--with-libxml2)"
      ulib_dbi_msg="no (--with-libdbi)"
ulib_pagespeed_msg="no (--with-page-speed)"
       ulib_v8_msg="no (--with-v8-javascript)"
     ulib_ipv6_msg="no (--with-ipv6)"
      ulib_pch_msg="no (--enable-pch)"
      ulib_LFS_msg="no (--enable-LFS)"
      ulib_dbg_msg="no (--enable-debug)"
    ulib_final_msg="no (--enable-final)"
      ulib_zip_msg="no (--enable-zip)"
   ulib_thread_msg="no (--enable-thread)"
     ulib_memp_msg="no (--enable-memory-pool)"
#  ulib_manual_msg="no (--enable-manual)"

# Add --{enable,disable,with,without}-feature options.
AC_COMPILATION_OPTIONS

# SECTION 3: check for programs <--- moved before section 2

AC_MSG_CHECKING(if you want to enable use of bison/yacc)
AC_ARG_WITH(parser,
	[  --with-parser           use parser generator bison/yacc],
	[use_parser=$withval],
	[use_parser=no])
AC_MSG_RESULT($use_parser)
if test "$use_parser" = "yes" ; then
	AC_PROG_YACC
	AC_PROG_LEX
	# Just additional warning checks, since AC_PROG just sets 'yacc' even without one present
   AC_CHECK_PROGS(XYACC,$YACC bison yacc,none)
   if test "$XYACC" = "none"
   then
    	AC_MSG_ERROR([no suitable bison/yacc found. Please install the 'bison' package.])
   fi
   AC_CHECK_PROGS(XLEX,$LEX flex lex,none)
   if test "$XLEX" = "none"
   then
    	AC_MSG_ERROR([no suitable lex found. Please install the 'flex' package.])
   fi
	ulib_parser_msg="enabled"
	flex_version=$(flex --version | head -n 1)
	bison_version=$(bison --version | head -n 1)
	AM_CONDITIONAL(USE_PARSER, true)
	AC_DEFINE(USE_PARSER, 1, [Define if use parser generator bison/yacc])
else
	flex_version="None"
	bison_version="None"
	AM_CONDITIONAL(USE_PARSER, false)
fi

AC_MSG_CHECKING(if you want to use distcc)
AC_ARG_WITH(distcc,
	[  --with-distcc           use distcc],
	[use_distcc=$withval],
	[use_distcc=no])
AC_MSG_RESULT($use_distcc)

# ---------------------------------------------------------------------------------------------------
# Enable Linux Netfilter Transparent Proxy
# ---------------------------------------------------------------------------------------------------
# AC_ARG_ENABLE(linux-netfilter,
# AC_HELP_STRING([--enable-linux-netfilter],[enable Transparent Proxy support for Linux (Netfilter)]),
# [ if test "$enableval" = "yes" ; then
#    AC_MSG_NOTICE([Linux (Netfilter) Transparent Proxy enabled])
#    AC_DEFINE(LINUX_NETFILTER,1,[Enable support for Transparent Proxy on Linux (Netfilter) systems])
#    LINUX_NETFILTER="yes"
#   else
#    AC_DEFINE(LINUX_NETFILTER,0,[Enable support for Transparent Proxy on Linux (Netfilter) systems])
#   fi
# ])
# if test "$LINUX_NETFILTER"; then
#  AC_MSG_CHECKING(if packages libnfnetlink and libnetfilter_conntrack are installed)
# 	PKG_CHECK_MODULES([LIBNFNETLINK], [libnfnetlink >= 1.0.0])
# 	PKG_CHECK_MODULES([LIBNETFILTER_CONNTRACK], [libnetfilter_conntrack >= 0.9.1])
# 	AC_SUBST(pkg_cv_LIBNETFILTER_CONNTRACK_LIBS)
# fi
# ---------------------------------------------------------------------------------------------------

# SECTION 4: checks for libraries

TWOCAN_CONF_MSG(Checking for libraries to link against)

AC_CHECK_LIB(posix4,nanosleep)
AC_CHECK_LIB(socket,socketpair)

LIBS_SAVE=${LIBS}
AC_CHECK_LIB(GeoIP,GeoIP_id_by_ipnum)
LIBS="-ldl"
AC_CHECK_LIB(tcc,tcc_compile_string)
LIBS=${LIBS_SAVE}

libz_version="no"
pcre_version="no"
ldap_version="no"
expat_version="no"
libssh_version="no"
libcurl_version="no"
ssl_version="no"
libmagic_version="no"
libmysql_version="no"
libuuid_version="no"
libevent_version="no"
libxml2_version="no"
libdbi_version="no"
page_speed_version="no"
v8_version="no"

AC_CHECK_PACKAGE
AC_SUBST(PRG_LDFLAGS)

AM_CONDITIONAL(SSL,			test "$USE_LIBSSL"		= "yes")
AM_CONDITIONAL(SSL_TS,		test "$HAVE_SSL_TS"		= "yes")
AM_CONDITIONAL(SSH,			test "$USE_LIBSSH"		= "yes")
AM_CONDITIONAL(PCRE,			test "$USE_LIBPCRE"		= "yes")
AM_CONDITIONAL(LDAP,			test "$USE_LIBLDAP"		= "yes")
AM_CONDITIONAL(CURL,			test "$USE_LIBCURL"		= "yes")
AM_CONDITIONAL(LIBZ,			test "$USE_LIBZ"			= "yes")
AM_CONDITIONAL(EXPAT,		test "$USE_LIBEXPAT"		= "yes")
AM_CONDITIONAL(MAGIC,		test "$USE_LIBMAGIC"		= "yes")
AM_CONDITIONAL(MYSQL,		test "$USE_LIBMYSQL"		= "yes")
AM_CONDITIONAL(DBI,			test "$USE_LIBDBI"		= "yes")
AM_CONDITIONAL(LIBEVENT,	test "$USE_LIBEVENT"		= "yes")
AM_CONDITIONAL(LIBXML2,		test "$USE_LIBXML2"		= "yes")
AM_CONDITIONAL(PAGE_SPEED, test "$USE_PAGE_SPEED"	= "yes")
AM_CONDITIONAL(V8,			test "$USE_LIBV8"			= "yes")

AC_DEFINE_UNQUOTED(_FLEX_VERSION,		 "${flex_version}",			[Flex version])
AC_DEFINE_UNQUOTED(_BISON_VERSION,		 "${bison_version}",			[Bison version])
AC_DEFINE_UNQUOTED(_PCRE_VERSION,		 "${pcre_version}",			[PCRE - Perl compatible regular expressions version])
AC_DEFINE_UNQUOTED(_LDAP_VERSION,		 "${ldap_version}",			[Ldap version])
AC_DEFINE_UNQUOTED(_EXPAT_VERSION,		 "${expat_version}",			[Expat version])
AC_DEFINE_UNQUOTED(_LIBZ_VERSION,		 "${libz_version}",			[libz - general purpose compression library version])
AC_DEFINE_UNQUOTED(_LIBSSH_VERSION,		 "${libssh_version}",		[libSSH version])
AC_DEFINE_UNQUOTED(_SSL_VERSION,			 "${ssl_version}",			[SSL version])
AC_DEFINE_UNQUOTED(_CURL_VERSION,		 "${libcurl_version}",		[libcURL - multiprotocol file transfer library version])
AC_DEFINE_UNQUOTED(_MAGIC_VERSION,		 "${libmagic_version}",		[libmagic - magic number recognition library version])
AC_DEFINE_UNQUOTED(_MYSQL_VERSION,		 "${libmysql_version}",		[libmysql - MySQL Database System library version])
AC_DEFINE_UNQUOTED(_DBI_VERSION,			 "${libdbi_version}",		[libdbi - Database Independent Abstraction Layer version])
AC_DEFINE_UNQUOTED(_LIBUUID_VERSION,	 "${libuuid_version}",		[libuuid - version library to create a new UUID value])
AC_DEFINE_UNQUOTED(_LIBEVENT_VERSION,	 "${libevent_version}",		[libevent - event notification library version])
AC_DEFINE_UNQUOTED(_LIBXML2_VERSION,	 "${libxml2_version}",		[libxml2 - version 2 of the library to manipulate XML files])
AC_DEFINE_UNQUOTED(_PAGE_SPEED_VERSION, "${page_speed_version}",  [PageSpeed - version of Google page speed SDK])
AC_DEFINE_UNQUOTED(_V8_VERSION,			 "${v8_version}",				[V8 - version of Google V8 JavaScript Engine])
 
LIBS_SAVE=${LIBS}

if test "$USE_LIBZ" = "yes"; then
	ulib_libz_msg="yes ( ${libz_version} )"
	AC_CHECK_LIB(z,zlib_deflate_workspacesize)
	if test "$ac_cv_lib_z_zlib_deflate_workspacesize" = "yes"; then
		AC_DEFINE(U_ZLIB_DEFLATE_WORKSPACESIZE, 1, [Define if we have zlib with this function])
	fi
fi

if test "$enable_zip" = "yes" && test "$USE_LIBZ" = "yes"; then
	ulib_zip_msg="enabled"
	AC_DEFINE(ENABLE_ZIP, 1, [Define if enable ZIP support])
	AM_CONDITIONAL(ZIP, true)
else
	AC_DEFINE(DISABLE_ZIP, 1, [Define if disable ZIP support])
	AM_CONDITIONAL(ZIP, false)
fi

modules="mod_rpc mod_shib mod_stream mod_nocat mod_socket mod_scgi mod_fcgi mod_geoip mod_proxy mod_soap mod_ssi mod_tsa mod_http mod_echo"

if test "$USE_LIBPCRE" = "yes"; then
	ulib_pcre_msg="yes ( ${pcre_version} )"
else
	modules=`echo $modules | sed s/mod_proxy//`
fi

if test "$USE_LIBCURL" = "yes"; then
	ulib_curl_msg="yes ( ${libcurl_version} )"
fi

if test "$USE_LIBLDAP" = "yes"; then
	ulib_ldap_msg="yes ( ${ldap_version} )"
fi

if test "$USE_LIBEXPAT" = "yes"; then
	ulib_expat_msg="yes ( ${expat_version} )"
else
	modules=`echo $modules | sed s/mod_soap//`
fi

if test "$USE_LIBMAGIC" = "yes"; then
	ulib_magic_msg="yes ( ${libmagic_version} )"
fi

if test "$USE_LIBSSL" = "yes"; then
   ulib_ssl_msg="yes ( ${ssl_version} )"
fi

if test "$USE_LIBSSH" = "yes"; then
   ulib_ssh_msg="yes ( ${libssh_version} )"
fi

if test "$USE_LIBMYSQL" = "yes"; then
   ulib_mysql_msg="yes ( ${libmysql_version} )"
fi

if test "$USE_LIBDBI" = "yes"; then
   ulib_dbi_msg="yes ( ${libdbi_version} )"
fi

if test "$USE_LIBUUID" = "yes"; then
   ulib_libuuid_msg="yes ( ${libuuid_version} )"
fi

if test "$USE_LIBEVENT" = "yes"; then
   ulib_libevent_msg="yes ( ${libevent_version} )"
fi

if test "$USE_LIBXML2" = "yes"; then
   ulib_libxml2_msg="yes ( ${libxml2_version} )"
fi

if test "$USE_PAGE_SPEED" = "yes"; then
   ulib_pagespeed_msg="yes ( ${page_speed_version} )"
fi

if test "$USE_LIBV8" = "yes"; then
   ulib_v8_msg="yes ( ${v8_version} )"
fi

case "$target_os" in
	mingw32*)
	if test "$with_gnu_ld" = "yes"; then
		LDFLAGS="${LDFLAGS} -Wl,--enable-auto-import"
	fi
	LIBS_SAVE="${LIBS_SAVE} -lwinmm -lws2_32"
	if test "$USE_LIBSSL" = "yes"; then
		LIBS_SAVE="${LIBS_SAVE} -lwsock32 -lgdi32 -lz";
	fi
	AM_CONDITIONAL(PTHREAD, false)
	AM_CONDITIONAL(SEMAPHORE, true)
	AC_DEFINE(HAVE_MODULES, [1], [support for plugin modules])
	AC_DEFINE(DISABLE_THREAD, 1, [Define if disable thread support])
	;;
	*)
	LIBS=""
	AC_CHECK_LIB(cap,cap_init)
	AC_CHECK_LIB(pthread,sem_init)
	if test "$ac_cv_lib_pthread_sem_init" = "yes" && test "$enable_thread" = "yes"; then
		OST_LIB_PTHREAD
		ulib_thread_msg="enabled"
		AM_CONDITIONAL(PTHREAD, true)
		AM_CONDITIONAL(SEMAPHORE, true)
		AC_DEFINE(ENABLE_THREAD, 1, [Define if enable thread support])
		AC_DEFINE(USE_SEMAPHORE, 1, [Define if we have semaphore support])
		LIBS_SAVE="${LIBS_SAVE} -l$ost_cv_thread_library";
	else
		AM_CONDITIONAL(PTHREAD, false)
		AC_DEFINE(DISABLE_THREAD, 1, [Define if disable thread support])
		LIBS=""
		AC_CHECK_LIB(rt,sem_init)
		if test "$ac_cv_lib_rt_sem_init" = "yes"; then
			LIBS_SAVE="${LIBS_SAVE} -lrt";
			AM_CONDITIONAL(SEMAPHORE, true)
			AC_DEFINE(USE_SEMAPHORE, 1, [Define if we have semaphore support])
		else
			AM_CONDITIONAL(SEMAPHORE, false)
		fi
	fi
	OST_CC_DYNAMIC
	if test "$ost_cv_dynloader" = "yes"; then
		LIBS_SAVE="${LIBS_SAVE} $lt_cv_dlopen_libs"
	fi
	if test "$enable_static" = "yes" && test "$enable_shared" = "no"; then
		LIBS_SAVE="${LIBS_SAVE} -lstdc++"
	fi
	if test "$ac_cv_lib_tcc_tcc_compile_string" = "yes"; then
		LIBS_SAVE="-ltcc ${LIBS_SAVE}"
	fi
	if test "$ac_cv_lib_cap_cap_init" = "yes"; then
		LIBS_SAVE="${LIBS_SAVE} -lcap";
	fi
	;;
esac

LIBS=${LIBS_SAVE}

# SECTION 5: checks for header files

TWOCAN_CONF_MSG(Checking for headers)

AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_MAJOR
AC_HEADER_DIRENT
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([assert.h byteswap.h endian.h execinfo.h ndir.h string.h netpacket/packet.h sys/dir.h sys/ndir.h sys/ioctl.h sys/sendfile.h \
						semaphore.h sys/syscall.h sysexits.h termios.h streambuf.h \
						linux/netfilter_ipv4/ipt_ACCOUNT.h libnetfilter_conntrack/libnetfilter_conntrack.h])

AC_CHECK_HEADERS([sys/inotify.h mcheck.h])
AC_LANG_C
AC_MSG_CHECKING([whether sys/inotify.h actually works])
AC_COMPILE_IFELSE(
  AC_LANG_PROGRAM([[#include <sys/inotify.h>]],
                  [[return (-1 == inotify_init());]]
  ),
  [AC_MSG_RESULT([yup]); AC_DEFINE([SYS_INOTIFY_H_EXISTS_AND_WORKS],[1],[sys/inotify.h exists and works correctly])],
  [AC_MSG_RESULT([nope, using own inotify headers])]
)
AC_LANG_CPLUSPLUS

if test "$ac_cv_header_sys_inotify_h" = "yes"; then
AC_CHECK_FUNCS([inotify_init1])
fi

# SECTION 6: Checks for typedefs

AC_TYPE_SIGNAL

# SECTION 7: checks for structures

TWOCAN_CONF_MSG(Checking for structures)

AC_STRUCT_TM
AC_HEADER_STAT
AC_MEMBER_SI_ADDR
AC_STRUCT_ST_BLOCKS
AC_CHECK_TYPE([struct iphdr],[AC_DEFINE(HAVE_IPHDR, 1, [struct iphdr needed for IPv6 support])],[],
[#include <netinet/ip.h>])
AC_CHECK_MEMBER(struct dirent.d_reclen,AC_DEFINE(DIRENT_HAVE_D_RECLEN,1,[define if you have d_reclen in struct dirent]),,
[ #include <dirent.h> ])
AC_CHECK_MEMBER(struct dirent.d_namlen,AC_DEFINE(DIRENT_HAVE_D_NAMLEN,1,[define if you have d_namlen in struct dirent]),,
[ #include <dirent.h> ])
AC_CHECK_MEMBER(struct tm.tm_gmtoff,AC_DEFINE(TM_HAVE_TM_GMTOFF,1,[define if you have tm_gmtoff in struct tm]),,
[ #include <time.h> ])

TWOCAN_CONF_MSG(Checking for types, and defing if needed)

# for miniLZO
AC_C_CONST
AC_CHECK_TYPE(ptrdiff_t,long)
AC_TYPE_SIZE_T
AC_CHECK_SIZEOF(unsigned char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(time_t)
AC_CHECK_SIZEOF(size_t)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(__int64)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(ptrdiff_t)
AC_CHECK_FUNCS([memcmp memcpy memmove memset memrchr])

# SECTION 8: checks for variables

# SECTION 9: checks for compiler characteristics

# SECTION 10: checks for library functions

TWOCAN_CONF_MSG(Checking for functions)

AC_FUNC_NANOSLEEP
AC_FUNC_CLOSEDIR_VOID
# Check for functions in one big call, to reduce the size of configure
AC_CHECK_FUNCS([accept4 clock_gettime daemon epoll_create1 epoll_wait fallocate fallocate64 fnmatch getaddrinfo getnameinfo getpriority inet_ntop memmem \
					 mremap pread sendfile64 strndup mkdtemp strptime strtof strtoull strtold gmtime_r timegm strerror strsignal sched_getaffinity])

if test "$ac_cv_func_inet_ntop" != "yes"; then
	AC_CHECK_LIB(nsl,inet_ntop)
fi

AM_CONDITIONAL(TCC,			 test "$ac_cv_lib_tcc_tcc_compile_string"	 = "yes")
AM_CONDITIONAL(PREAD,		 test "$ac_cv_func_pread"						 = "yes")
AM_CONDITIONAL(DAEMON,		 test "$ac_cv_func_daemon"						 = "yes")
AM_CONDITIONAL(TIMEGM,		 test "$ac_cv_func_timegm"						 = "yes")
AM_CONDITIONAL(MREMAP,      test "$ac_cv_func_mremap"						 = "yes")
AM_CONDITIONAL(MEMRCHR,     test "$ac_cv_func_memrchr"					 = "yes")
AM_CONDITIONAL(STRNDUP,     test "$ac_cv_func_strndup"					 = "yes")
AM_CONDITIONAL(MKDTEMP,     test "$ac_cv_func_mkdtemp"					 = "yes")
AM_CONDITIONAL(FNMATCH,		 test "$ac_cv_func_fnmatch"					 = "yes")
AM_CONDITIONAL(STRPTIME,    test "$ac_cv_func_strptime"					 = "yes")
AM_CONDITIONAL(GMTIME_R,	 test "$ac_cv_func_gmtime_r"					 = "yes")
AM_CONDITIONAL(SENDFILE,    test "$ac_cv_func_sendfile64"				 = "yes")
AM_CONDITIONAL(FALLOCATE,	 test "$ac_cv_func_fallocate"					 = "yes")
AM_CONDITIONAL(FALLOCATE64, test "$ac_cv_func_fallocate64"				 = "yes")
AM_CONDITIONAL(NANOSLEEP,   test "$ac_cv_func_nanosleep"					 = "yes")
AM_CONDITIONAL(GETOPT_LONG, test "$ac_cv_func_getopt_long"				 = "yes")
AM_CONDITIONAL(ASSERT,		 test "$ac_cv_header_assert_h"				 = "yes")
AM_CONDITIONAL(PLUGIN,		 test "$enable_shared"							 = "yes") # NB: if not don't build .so object...

if test "$ac_cv_lib_GeoIP_GeoIP_id_by_ipnum" = "yes"; then
	AM_CONDITIONAL(GEOIP, true)
else
	AM_CONDITIONAL(GEOIP, false)
	modules=`echo $modules | sed s/mod_geoip//`
fi

# NB: this is the only version of gcc compiler that work with...
if test "$gcc_version" = "4.2.2" && test "$enable_debug" = "yes"; then
	AM_CONDITIONAL(MOD_SHIB, true)
else
	AM_CONDITIONAL(MOD_SHIB, false)
	modules=`echo $modules | sed s/mod_shib//`
fi

# SECTION 11: checks for function characteristics

if test "$ost_cv_ipv6" = "yes"; then
	ulib_ipv6_msg="enabled"
	AC_DEFINE(ENABLE_IPV6,  1, [Define if  enable ipv6 support])
else
	AC_DEFINE(DISABLE_IPV6, 1, [Define if disable ipv6 support])
fi

# SECTION 12: checks for type characteristics

# SECTION 13: checks for system services

if test "$cross_compiling" != "yes"; then
	AM_SOCKET_SO_RCVTIMEO
	if test "$ac_cv_func_fallocate" = "yes" && test "$ac_cv_func_fallocate64" = "yes"; then
		AC_TRY_FALLOCATE
	fi
fi

# SECTION 14: checks for aggregated features

add_calls=""
use_static_module=""
static_handler_rcp=""
static_handler_shib=""
static_handler_stream=""
static_handler_socket=""
static_handler_scgi=""
static_handler_fcgi=""
static_handler_geoip=""
static_handler_proxy=""
static_handler_soap=""
static_handler_ssi=""
static_handler_tsa=""
static_handler_nocat=""
static_handler_http=""
static_handler_echo=""

AC_ARG_ENABLE(static-module,
AC_HELP_STRING([--enable-static-module=MODULES][ - mod_rpc mod_shib mod_stream mod_socket mod_scgi mod_fcgi mod_geoip mod_proxy mod_soap mod_ssi mod_tsa mod_nocat mod_http mod_echo]),
[use_static_module="$use_static_module $enableval "],[])

for mod in $modules; do
	AC_MSG_CHECKING([module "$mod"])

	if echo $use_static_module | grep -w $mod >/dev/null || echo $use_static_module | grep all >/dev/null; then

		add_calls="$add_calls \n loadStaticLinkedModules(\"$mod\");"

		if test "$mod" = "mod_rpc"; then
			static_handler_rpc="yes"
			AC_DEFINE(U_STATIC_HANDLER_RPC,, [STATIC_HANDLER_RPC])
		elif test "$mod" = "mod_shib"; then
			static_handler_shib="yes"
			LIBS="-llog4cpp -lshib -lshib-target -lsaml -lxml-security-c -lxerces-c ${LIBS}"
			AC_DEFINE(U_STATIC_HANDLER_SHIB,, [STATIC_HANDLER_SHIB])
		elif test "$mod" = "mod_stream"; then
			static_handler_stream="yes"
			AC_DEFINE(U_STATIC_HANDLER_STREAM,, [STATIC_HANDLER_STREAM])
		elif test "$mod" = "mod_socket"; then
			static_handler_socket="yes"
			AC_DEFINE(U_STATIC_HANDLER_SOCKET,, [STATIC_HANDLER_SOCKET])
		elif test "$mod" = "mod_scgi"; then
			static_handler_scgi="yes"
			AC_DEFINE(U_STATIC_HANDLER_SCGI,, [STATIC_HANDLER_SCGI])
		elif test "$mod" = "mod_fcgi"; then
			static_handler_fcgi="yes"
			AC_DEFINE(U_STATIC_HANDLER_FCGI,, [STATIC_HANDLER_FCGI])
		elif test "$mod" = "mod_geoip"; then
			static_handler_geoip="yes"
			LIBS="-lGeoIP ${LIBS}"
			AC_DEFINE(U_STATIC_HANDLER_GEOIP,, [STATIC_HANDLER_GEOIP])
		elif test "$mod" = "mod_proxy"; then
			static_handler_proxy="yes"
			AC_DEFINE(U_STATIC_HANDLER_PROXY,, [STATIC_HANDLER_PROXY])
		elif test "$mod" = "mod_soap"; then
			static_handler_soap="yes"
			AC_DEFINE(U_STATIC_HANDLER_SOAP,, [STATIC_HANDLER_SOAP])
		elif test "$mod" = "mod_ssi"; then
			static_handler_ssi="yes"
			AC_DEFINE(U_STATIC_HANDLER_SSI,, [STATIC_HANDLER_SSI])
		elif test "$mod" = "mod_tsa"; then
			static_handler_tsa="yes"
			AC_DEFINE(U_STATIC_HANDLER_TSA,, [STATIC_HANDLER_TSA])
		elif test "$mod" = "mod_nocat"; then
			static_handler_nocat="yes"
			AC_DEFINE(U_STATIC_HANDLER_NOCAT,, [STATIC_HANDLER_NOCAT])
		elif test "$mod" = "mod_http"; then
			static_handler_http="yes"
			AC_DEFINE(U_STATIC_HANDLER_HTTP,, [STATIC_HANDLER_HTTP])
		elif test "$mod" = "mod_echo"; then
			static_handler_echo="yes"
			AC_DEFINE(U_STATIC_HANDLER_ECHO,, [STATIC_HANDLER_ECHO])
		fi

	   AC_MSG_RESULT([static])
	else
	   AC_MSG_RESULT([dynamic])
	fi
done

AC_MSG_CHECKING([loader.autoconf files])
printf "$add_calls\n" > src/ulib/net/server/plugin/loader.autoconf.cpp
AC_MSG_RESULT([done])

AM_CONDITIONAL(STATIC_HANDLER_RPC,    test "$static_handler_rpc"	  = "yes")
AM_CONDITIONAL(STATIC_HANDLER_SHIB,	  test "$static_handler_shib"	  = "yes")
AM_CONDITIONAL(STATIC_HANDLER_STREAM, test "$static_handler_stream" = "yes")
AM_CONDITIONAL(STATIC_HANDLER_SOCKET, test "$static_handler_socket" = "yes")
AM_CONDITIONAL(STATIC_HANDLER_SCGI,	  test "$static_handler_scgi"	  = "yes")
AM_CONDITIONAL(STATIC_HANDLER_FCGI,	  test "$static_handler_fcgi"	  = "yes")
AM_CONDITIONAL(STATIC_HANDLER_GEOIP,  test "$static_handler_geoip"  = "yes")
AM_CONDITIONAL(STATIC_HANDLER_PROXY,  test "$static_handler_proxy"  = "yes")
AM_CONDITIONAL(STATIC_HANDLER_SOAP,   test "$static_handler_soap"   = "yes")
AM_CONDITIONAL(STATIC_HANDLER_SSI,    test "$static_handler_ssi"    = "yes")
AM_CONDITIONAL(STATIC_HANDLER_TSA,    test "$static_handler_tsa"    = "yes")
AM_CONDITIONAL(STATIC_HANDLER_NOCAT,  test "$static_handler_nocat"  = "yes")
AM_CONDITIONAL(STATIC_HANDLER_HTTP,   test "$static_handler_http"	  = "yes")
AM_CONDITIONAL(STATIC_HANDLER_ECHO,	  test "$static_handler_echo"   = "yes")

# SECTION 15: Final checks

if test "$enable_debug" = "yes"; then
	ULIB="ulib_g"
   ulib_dbg_msg="enabled"
	AM_CONDITIONAL(DEBUG, true)
else
	ULIB="ulib"
	AM_CONDITIONAL(DEBUG, false)
fi

AC_SUBST(ULIB)

if test "$enable_memory_pool" = "yes"; then
   ulib_memp_msg="enabled"
	AM_CONDITIONAL(MEMORY_POOL, true)
else
	AM_CONDITIONAL(MEMORY_POOL, false)
fi

if test "$enable_LFS" = "yes"; then
	ulib_LFS_msg="enabled"
	CPPFLAGS="${CPPFLAGS} -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
	AC_DEFINE(SIZEOF_OFF_T, 8, [Define if enable LFS support])
else
	AC_CHECK_SIZEOF(off_t)
fi

if test "$enable_pch" = "yes" ; then
	DIR=`pwd`
	ulib_pch_msg="enabled"
	CPPFLAGS="-include $DIR/include/ulib/all.h -Winvalid-pch ${CPPFLAGS}"
fi

if test "$enable_final" = "yes"; then
	ulib_final_msg="enabled"
	AM_CONDITIONAL(FINAL, true)
else
	AM_CONDITIONAL(FINAL, false)
fi

if test "$enable_HUPS" = "yes"; then
	AM_CONDITIONAL(HUPS, true)
else
	AM_CONDITIONAL(HUPS, false)
fi

# if gcc compiler add values to *FLAGS...

if test "${ac_cv_c_compiler_gnu}" = "yes"; then

	TWOCAN_CONF_MSG(Checking for gcc compiler flags)

	AC_CC_TRY_FLAG

	# -freorder-blocks (give some problem, maybe need -Os...)
	#
	# Graphite loop optimizations: -fgraphite, -fgraphite-identity, -floop-block, -floop-flatten,
	#										 -floop-interchange, -floop-strip-mine, -floop-parallelize-all, -ftree-loop-linear

	if test "${enable_gcc_optimized}" = "yes"; then
		MAYBE_FLAGS="$MAYBE_FLAGS -fstrict-aliasing -fno-stack-protector -fomit-frame-pointer -finline \
										  -findirect-inlining -ftree-switch-conversion"
	fi

	# Also to turn various gcc/glibc-specific preprocessor checks
	# -------------------------------------------------------------------------------------
	# -Wno-format -Wno-format-extra-args
	# -------------------------------------------------------------------------------------
	MAYBE_FLAGS="$MAYBE_FLAGS -Wstrict-aliasing=2 -Wall -Wextra -Wsign-compare -Wpointer-arith -Wwrite-strings -Wlogical-op \
									  -Wmissing-declarations -Wpacked -Wswitch-enum -Wmissing-format-attribute -Winit-self -Wformat \
									  -Wformat-extra-args -Wenum-compare"

	case "${gcc_version}" in
		2*)
			CPPFLAGS="${CPPFLAGS} -O0"
		;;
		3*)
		;;
		4.0*)
		;;
		4.1*)
		;;
		4.2*)
		;;
		4.3*)
		;;
		4.4*)
		;;
		*)
		MAYBE_FLAGS="$MAYBE_FLAGS -Wno-unused-result -Wshadow -Wsuggest-attribute=pure -Wsuggest-attribute=noreturn" # -Wsuggest-attribute=const

		if test "${enable_gcc_optimized}" = "yes"; then
			MAYBE_FLAGS="$MAYBE_FLAGS -Ofast -flto -ftree-partial-pre" ## -ffunction-sections -fdata-sections
		fi
		;;
	esac

#	-fno-common
#  -Wno-missing-field-initializers -Wno-attributes -Wno-long-long
# -------------------------------------------------------------------------------------
#	-fwhole-program
# -------------------------------------------------------------------------------------
# Assume that the current compilation unit represents the whole program being compiled.
# All public functions and variables with the exception of main and those merged by attribute
# externally_visible become static functions
# -------------------------------------------------------------------------------------

	if test "$enable_debug" = "yes"; then
		MAYBE_FLAGS="$MAYBE_FLAGS -Wunsafe-loop-optimizations -fsanitize=address -fsanitize=thread" ## _FORTIFY_SOURCE enabled by default g++ 4.7.2
		if test "$USE_LIBSSL" = "yes"; then
			MAYBE_FLAGS="$MAYBE_FLAGS -Wno-unused-parameter"
		fi
	else
		MAYBE_FLAGS="$MAYBE_FLAGS -Winline -Wno-unused-parameter -Wno-unused-variable"
	fi

	if test "${enable_gcc_optimized}" = "yes"; then
		if test "$use_distcc" != "yes" ; then
			MAYBE_FLAGS="$MAYBE_FLAGS -mtune=native" # NB: distcc don't work with this...
		fi
		if test "$enable_final" = "yes"; then
			MAYBE_FLAGS="$MAYBE_FLAGS -funit-at-a-time"
		fi
	fi

	# -Wcast-qual
	CC_MAYBE_FLAGS="-Werror-implicit-function-declaration -Wstrict-prototypes -Wc++-compat \
						 -Wmissing-prototypes -Wnested-externs -Wdeclaration-after-statement -Wold-style-definition -Wsizeof-pointer-memaccess"

	CXX_MAYBE_FLAGS="-fno-check-new -fno-exceptions -fno-rtti -Wno-deprecated -Wdelete-non-virtual-dtor"

	if test "$enable_debug" = "yes"; then
		# -Wzero-as-null-pointer-constant"
		CXX_MAYBE_FLAGS="$CXX_MAYBE_FLAGS -Wc++11-compat"
	fi

	AC_CACHE_CHECK([for gcc supported flags], ulib_cv_flags, [
		echo
		FLAGS=""
		CC_FLAGS=""
		CXX_FLAGS=""

		# Some warning options are not supported by all versions of gcc, so test all desired options against the current compiler.
		# Note that there are some order dependencies here. Specifically, an option that disables a warning will have no net effect
		# if a later option then enables that warnings, (perhaps implicitly). So we put some grouped options (-Wall and -Wextra) up
		# front and the -Wno options last.

		# ------------------------------------------------
		# Set the test language as C
		# ------------------------------------------------
		AC_LANG_C

		for W in $CC_MAYBE_FLAGS; do
			AC_CC_TRY_FLAG([$W], [CC_FLAGS="$CC_FLAGS $W"])
		done
		ulib_cv_CC_flags=$CC_FLAGS
		# ------------------------------------------------

		# reset the test language as C++

		AC_LANG_CPLUSPLUS

		for W in $MAYBE_FLAGS; do
			AC_CC_TRY_FLAG([$W], [FLAGS="$FLAGS $W"])
		done
		ulib_cv_flags=$FLAGS

		for W in $CXX_MAYBE_FLAGS; do
			AC_CC_TRY_FLAG([$W], [CXX_FLAGS="$CXX_FLAGS $W"])
		done
		ulib_cv_CXX_flags=$CXX_FLAGS

		AC_MSG_CHECKING([which gcc flags were supported])
	])

	# NB: "-g -O2" it is already present in configure script...
	CPPFLAGS="${CPPFLAGS} -pipe -D_GNU_SOURCE"

	CFLAGS="${CFLAGS} $ulib_cv_CC_flags"
	CPPFLAGS="${CPPFLAGS} $ulib_cv_flags"
	CXXFLAGS="${CXXFLAGS} $ulib_cv_CXX_flags"
fi

case "$target_os" in
	mingw32*)
	;;
	cygwin*)
	AC_DEFINE(HAVE_SIGINFO_T, 1, [Define if exist type siginfo_t])
	;;
	*)
	AC_CHECK_TYPE([siginfo_t], [AC_DEFINE_UNQUOTED(HAVE_SIGINFO_T, 1, [Define if exist type siginfo_t])], [], [#include <signal.h>])
	if test "$ac_cv_cxx_visibility_inlines_hidden_flag" = "yes"; then
		AC_DEFINE(HAVE_GNUC_VISIBILTY, 1, [enable gcc visibility features])
		CXXFLAGS="${CXXFLAGS} -fvisibility=hidden -fvisibility-inlines-hidden"
	fi
	if test "$with_gnu_ld" = "yes" && test "$enable_new_ldflags" = "yes"; then
		LDFLAGS="${LDFLAGS} -Wl,-O1 -Wl,--as-needed -Wl,-z,now,-O1,--hash-style=gnu,--sort-common -Wl,--as-needed"
	fi
	;;
esac

# cpp

AC_PATH_PROG( cpp,  cpp, no)
if test "$cpp" != "no"; then
	AC_DEFINE(HAVE_CPP, 1, [enable cpp preprocessor features])
fi
AC_PATH_PROG(mcpp, mcpp, no)
if test "$mcpp" != "no"; then
	AC_DEFINE(HAVE_MCPP, 1, [enable mcpp preprocessor features])
fi

# manuale

AC_PATH_PROG(DOXYGEN, doxygen, no)
AM_CONDITIONAL(DOXY, test "$DOXYGEN" != "no")
AC_SUBST(DOXYGEN)

# sostituzioni

TWOCAN_CONF_MSG(Output Substitution)

ULIB_LIBS="${LIBS}"
ULIB_CFLAGS="${CFLAGS}"
ULIB_LDFLAGS="${LDFLAGS}"
ULIB_CXXFLAGS="${CXXFLAGS}"
ULIB_CPPFLAGS="${CPPFLAGS}"

AC_SUBST(ULIB_LIBS)
AC_SUBST(ULIB_CFLAGS)
AC_SUBST(ULIB_LDFLAGS)
AC_SUBST(ULIB_CXXFLAGS)
AC_SUBST(ULIB_CPPFLAGS)

AC_DEFINE_UNQUOTED(CXX_VAR, 		"${CXX}", 		[Compiler])
AC_DEFINE_UNQUOTED(LD_VAR, 		"${LD}", 		[Linker])
AC_DEFINE_UNQUOTED(LIBS_VAR, 		"${LIBS}", 		[Libraries])
AC_DEFINE_UNQUOTED(CFLAGS_VAR,	"${CFLAGS}",	[C Flags])
AC_DEFINE_UNQUOTED(LDFLAGS_VAR, 	"${LDFLAGS}", 	[Linker Flags])
AC_DEFINE_UNQUOTED(CXXFLAGS_VAR, "${CXXFLAGS}", [C++ Flags])
AC_DEFINE_UNQUOTED(CPPFLAGS_VAR, "${CPPFLAGS}", [Preprocessor Flags])
AC_DEFINE_UNQUOTED(PLATFORM_VAR, "${PLATFORM}", [Platform])

# rpm spec
RPM_REQUIRE=rpmpkgreq.lst
AC_SUBST_FILE([RPM_REQUIRE])
RPM_CONFIGURE="--enable-static --enable-shared"
AC_SUBST([RPM_CONFIGURE])

# Collect building environment
AC_COMPILATION_ENVIRONMENT

if test "$prefix" = "NONE"; then
	prefix="/usr/local"
fi

pkglibdir="$prefix/lib"
sysconfdir="$prefix/etc/ulib"
pkglibexecdir="$prefix/libexec/ulib"

# prefix dir
AC_DEFINE_UNQUOTED(U_PREFIXDIR,	"${prefix}", [install directory])
# plugin dir
AC_DEFINE_UNQUOTED(U_LIBEXECDIR, "${pkglibexecdir}", [install directory for plugins])
# config dir
AC_DEFINE_UNQUOTED(U_SYSCONFDIR, "${sysconfdir}", [install directory for configuration data])

echo \
"------------------------------------------------------------------------
configure: Configured to build src/ulib/libulib:

          ULib version: ${VERSION}
            Build ULib: Shared=${enable_shared}, Static=${enable_static}

            Host setup: ${host}
        Install prefix: ${prefix}
        Install plugin: ${pkglibexecdir}
    Configuration data: ${sysconfdir}

      Operating System: $os_version
          C++ Compiler: ${CXX} ( $gcc_version )
                Linker: ${LD} ( $ld_version )
  Standard C   library: ${libc_version}
  Standard C++ library: ${stdgpp_version}
             Libraries: ${LIBS}

             C   Flags: ${CFLAGS}
             C++ Flags: ${CXXFLAGS}
          Linker Flags: ${LDFLAGS}
    Preprocessor Flags: ${CPPFLAGS}

         debug support: ${ulib_dbg_msg}
      final build mode: ${ulib_final_msg}
    precompiled header: ${ulib_pch_msg}
   memory pool support: ${ulib_memp_msg}
           LFS support: ${ulib_LFS_msg}
          ipv6 support: ${ulib_ipv6_msg}
           zip support: ${ulib_zip_msg}
        thread support: ${ulib_thread_msg}

          LIBZ support: ${ulib_libz_msg}
          PCRE support: ${ulib_pcre_msg}
           SSL support: ${ulib_ssl_msg}
           SSH support: ${ulib_ssh_msg}
          LDAP support: ${ulib_ldap_msg}
          cURL support: ${ulib_curl_msg}
           XML support: ${ulib_expat_msg}
         MAGIC support: ${ulib_magic_msg}
         MySQL support: ${ulib_mysql_msg}
           DBI support: ${ulib_dbi_msg}
       libuuid support: ${ulib_libuuid_msg}
      libevent support: ${ulib_libevent_msg}
       libxml2 support: ${ulib_libxml2_msg}
    Page-Speed support: ${ulib_pagespeed_msg}
 V8 JavaScript support: ${ulib_v8_msg}

      LEX/YACC support: ${ulib_parser_msg}
      Lexical analyzer: ${LEX} ( ${flex_version} )
      Parser generator: ${YACC} ( ${bison_version} )

See include/ulib/internal/config.h for further configuration information.
------------------------------------------------------------------------"
#      Built-in manual: ${ulib_manual_msg}

# Verify the integrity of the current configuration.

# Check for availablity of "old style" C++ strstream header
AC_CHECK_HEADERS([strstream.h])

# Determine kind of C++ iostream support
AC_CXX_OLD_IOSTREAM

# SECTION 16: `AC_OUTPUT([FILE...])' read Makefile.in and write Makefile

AC_OUTPUT(Makefile \
			 rpm.sh \
			 ULib.spec \
			 m4/Makefile \
			 doc/Makefile \
			 include/Makefile \
			 contrib/Makefile \
			 src/ulib/Makefile \
			 src/ulib/ULib.rc \
			 src/ulib/ULib.pc \
			 src/ulib/lemon/Makefile \
			 src/ulib/net/server/plugin/Makefile \
			 src/ulib/net/server/plugin/usp/Makefile \
			 src/ulib/net/server/plugin/mod_shib/Makefile \
			 src/ulib/net/server/plugin/mod_geoip/Makefile \
			 src/ulib/net/server/plugin/page_speed/Makefile \
			 src/ulib/net/server/plugin/v8/Makefile \
			 include/ulib/Makefile \
			 contrib/HCSP/Makefile \
			 contrib/RSIGN/Makefile \
			 contrib/signer/Makefile \
			 examples/Makefile \
			 examples/IR/Makefile \
			 examples/csp/Makefile \
			 examples/lcsp/Makefile \
			 examples/rsign/Makefile \
			 examples/WiAuth/Makefile \
			 examples/xml2txt/Makefile \
			 examples/uclient/Makefile \
			 examples/userver/Makefile \
			 examples/PEC_log/Makefile \
			 examples/workflow/Makefile \
			 examples/doc_parse/Makefile \
			 examples/lrp_session/Makefile \
			 examples/http_header/Makefile \
			 examples/test_manager/Makefile \
			 examples/doc_classifier/Makefile \
			 examples/form_completion/Makefile \
			 examples/simple_client_server/Makefile \
			 examples/download_accelerator/Makefile \
			 examples/XAdES/Makefile examples/XAdES/XAdES.spec \
			 examples/xml2txt/xml2txt.spec examples/IR/searchengine-bin.spec examples/lcsp/lcsp.spec examples/lcsp/lcsp_rpc.spec \
			 examples/csp/cspclient.spec examples/csp/cspclient_rpc.spec examples/rsign/rsignclient.spec examples/rsign/rsignclient_rpc.spec \
			 examples/userver/web_server.spec examples/userver/wagsmserver.spec examples/workflow/workflow.spec  examples/PEC_log/PEC_log.spec \
			 examples/userver/tsaserver.spec examples/userver/cspserver.spec examples/userver/rsignserver.spec examples/doc_parse/doc_parse.spec \
			 tests/Makefile tests/base/Makefile tests/debug/Makefile tests/ulib/Makefile tests/examples/Makefile tests/contrib/Makefile)

#			 examples/parser/Makefile \
#			 src/ulib/base/Makefile src/ulib/debug/Makefile \
#			 ulib-config ,[chmod a+x ulib-config] )

awk -f configure_log.awk config.log							  > include/ulib/internal/config1.h
awk -f configure_h.awk   include/ulib/internal/config.h > include/ulib/internal/config2.h
cd include/ulib/internal
sed -e s!"@thrprefix@/thread.h"!"thread.h"! < config.h > config3.h # Common C++
cat config3.h config2.h config1.h > config.h
rm -f config3.h config2.h config1.h
cd ../../..

echo
echo "***"

CPPFLAGS="-DHAVE_CONFIG_H -I${srcdir}/include ${CPPFLAGS}"

if test "$enable_pch" = "yes" ; then
	AC_MSG_CHECKING(build precompiled headers for ${srcdir}/include/ulib/all.h)
	echo "rm -f ${srcdir}/include/ulib/all.h.gch"																				  > ${srcdir}/PCH.cmd
	echo "${CXX} ${CPPFLAGS} ${CXXFLAGS} -c ${srcdir}/include/ulib/all.h -o ${srcdir}/include/ulib/all.h.gch" >> ${srcdir}/PCH.cmd
	rm -f ${srcdir}/include/ulib/all.h.gch
	${CXX} ${CPPFLAGS} ${CXXFLAGS} -c ${srcdir}/include/ulib/all.h -o ${srcdir}/include/ulib/all.h.gch
	test -f ${srcdir}/include/ulib/all.h.gch && AC_MSG_RESULT(OK)
fi

AC_CACHE_CHECK([if generated configuration is usable], ac_cv_configuration_is_usable,
[AC_TRY_COMPILE([
#include "src/ulib/internal/common.cpp"
], [int a = 0; a += 1;], [ac_cv_configuration_is_usable="yes"], [ac_cv_configuration_is_usable="no"])
])

if test "$ac_cv_configuration_is_usable" = "no" ; then
	# It appears that ulib/internal/common.cpp not compiled. If it didn't compile then there would be no chance that the rest would compile.
	AC_MSG_ERROR([The generated configuration appears to be unusable.
	Please verify that your system path and environment variables are correct.])
	exit 1
fi

echo
echo "You are now ready to build ULib"
echo "Enter the following command: ${T_MD}make && make install${T_ME}"
echo "***"
