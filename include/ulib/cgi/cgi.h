// ============================================================================
//
// = LIBRARY
//    ulib - c++ library
//
// = FILENAME
//    cgi.h - Common Gateway Interface
//
// = AUTHOR
//    Stefano Casazza
//
// ============================================================================

#ifndef ULIB_CGI_H
#define ULIB_CGI_H 1

#include <ulib/cgi/input.h>

/**
   @class UCGI

   The Common Gateway Interface (CGI) is a standard for external gateway programs to interface with
   information servers, such as HTTP servers. The official specification for the Common Gateway
   Interface may be found at http://hoohoo.ncsa.uiuc.edu/cgi/interface.html

   When an HTTP server receives a request for a CGI script, the server communicates to the script
   the details of the request. The HTTP server and a CGI script communicate in four major ways:

   1. Environment variables

   The HTTP server uses environment variables to pass information about the request to the CGI script.
   Depending on the type of request, the environment variables may or may not contain all the information
   required by the script to function properly.
   ------------------------------------------------------------------------------------------------------
   "SERVER_SOFTWARE=thttpd/2.23beta1 26may2002"
   "SERVER_NAME=david.unirel.intranet"
   "GATEWAY_INTERFACE=CGI/1.1"
   "SERVER_PROTOCOL=HTTP/1.1"
   "SERVER_PORT=80"

   SERVER_SOFTWARE   Il software del server usato. Esempi: CERN/3.0 o NCSA/1.3
   SERVER_NAME       Il nome dell' host (o l'indirizzo IP) dove sta girando lo script
   GATEWAY_INTERFACE La versione CGI del server
   SERVER_PROTOCOL   La versione del protocollo HTTP usato. Dovrebbe essere CGI/1.1
   SERVER_PORT       La porta TCP alla quale il server e' collegato. Di solito questo valore e' 80

   "REQUEST_METHOD=POST"
   "SCRIPT_NAME=/cgi-bin/prova.cgi"
   "CONTENT_LENGTH=508"
   "CONTENT_TYPE=text/xml; charset=utf-8"

   REQUEST_METHOD    Il metodo usato: GET, POST, HEAD
   PATH_INFO         L'URL ed informazioni aggiuntive inviate dal browser quando viene usato il metodo GET
   PATH_TRANSLATED   Il path reale del sistema contenuto all'interno della variabile
   SCRIPT_NAME       Il path di esecuzione dello script ed il nome
   QUERY_STRING      Informazioni inviate tramite il metodo GET. Tutte le informazioni inviate dopo il
                     simbolo '?' all'interno dell'URL
   CONTENT_LENGTH    Quando e' usato il metodo POST, il valore definisce la dimensione del canale di input.
                     Il numero di bytes inviati
   CONTENT_TYPE      Quando e' usato il metodo POST, il valore e': 'application/x-www-form-urlencoded'.
                     Quando viene inviato un file,   il valore e': 'multipart/form-data'

   HTTP_REFERER      L'URL del documento che contiene la form

   "REMOTE_ADDR=127.0.0.1"
   "HTTP_ACCEPT=text/xml, multipart"
   "HTTP_USER_AGENT=SOAP::Lite/Perl/0.55"

   REMOTE_HOST       Il nome logico dell' host che ha effettuato la richiesta
   REMOTE_ADDR       L'IP dell' host che ha effettuato la richiesta
   REMOTE_USER       Il nome dell' utente che ha inviato la richiesta (quando e' disponibile una forma di autenticazione)
   REMOTE_IDENT      Il nome del server che ha inviato la richiesta (quando e' disponibile il protocollo ident)
   HTTP_ACCEPT       L' elenco dei Content-type che il browser e' in grado di gestire
   HTTP_USER_AGENT   Il nome del browser che ha inviato le informazioni. Questa variabile di solito contiene
                     il nome del browser, la sua versione ed altre informazioni come la piattaforma usata
   ------------------------------------------------------------------------------------------------------

   2. The command line

   The command line is only used for isindex queries. Generally, isindex queries should not be used;
   since the command line is used directly, they present many potential security risks.

   3. Standard input

   For HTTP POST or PUT queries, the HTTP server communicates information to the CGI script via standard
   input. The amount of information written to standard input is stored in the CONTENT_LENGTH environment variable.

   4. Standard output

   A script returns its output on standard output. The output can be a document generated by the script,
   or instructions to the server for retrieving the desired output.
*/

class U_EXPORT UCGI {
public:

   // Check for memory error
   U_MEMORY_TEST

   // Allocator e Deallocator
   U_MEMORY_ALLOCATOR
   U_MEMORY_DEALLOCATOR

   /** Constructor of the class.
   If you are using FastCGI, you will need to pass UCgiInput subclass that will use to read input.
   If input is omitted, standard input and environment variables will be used

   @param _input A UCgiInput object to use for reading input
   */
   UCGI(UCgiInput* _input = 0) : input(_input)
      {
      U_TRACE_REGISTER_OBJECT(0, UCGI, "%p", _input)
      }

   /** Destructor of the class.
   */
   ~UCGI()
      {
      U_TRACE_UNREGISTER_OBJECT(0, UCGI)
      }

   // ==================================================================================
   // ENVIRONMENT - Contains the GET or POST data along with all environment
   //               variables set by the HTTP server specified in the CGI specification.
   // ==================================================================================

   UString getenv(const char* var) const
      {
      U_TRACE(0, "UCGI::getenv(%S)", var)

      UString result = (input ? input->getenv(var) : UCgiInput::_getenv(var));

      U_RETURN_STRING(result);
      }

   // ============================================================================
   // Server Information - Information on the server handling the HTTP/CGI request
   // ============================================================================

   /** Get the name and version of the HTTP server software
   */
   UString getServerSoftware() const { return getenv("SERVER_SOFTWARE"); }

   /** Get the hostname, DNS name or IP address of the HTTP server
   This is not a URL, for example www.gnu.org (no leading http://)
   */
   UString getServerName() const { return getenv("SERVER_NAME"); }

   /** Get the name and version of the gateway interface. This is usually CGI/1.1
   */
   UString getGatewayInterface() const { return getenv("GATEWAY_INTERFACE"); }

   /** Get the name and revision of the protocol used for this request. This is usually HTTP/1.0 or HTTP/1.1
   */
   UString getServerProtocol() const { return getenv("SERVER_PROTOCOL"); }

   /** Get the port number on the server to which this request was sent. This will usually be 80
   */
   long getServerPort() const { return getenv("SERVER_PORT").strtol(); }

   /** Determine if this is a secure request. A secure request is usually made using SSL via HTTPS
   */
   bool usingHTTPS() const { UString tmp = input->getenv("HTTPS"); return (tmp.empty() == false); }

   // ============================================================================

   // ==============================================================
   // CGI Query Information - Information specific to this CGI query
   // ==============================================================

   /** Get the HTTP cookies associated with this query, if any
   */
   UString getCookies() const { return getenv("HTTP_COOKIE"); }

   /** Get the request method used for this query. This is usually one of GET or POST
   */
   UString getRequestMethod() const { return getenv("REQUEST_METHOD"); }

   /** Get the extra path information for this request, given by the client.
   For example, in the string foo.cgi/cgicc the path information is cgicc
   */
   UString getPathInfo() const { return getenv("PATH_INFO"); }

   /** Get the translated path information (virtual to physical mapping).
   For example, www.gnu.org may be translated to /htdocs/index.html
   */
   UString getPathTranslated() const { return getenv("PATH_TRANSLATED"); }

   /** Get the full path to this CGI application. This is useful for self-referencing URIs
   */
   UString getScriptName() const { return getenv("SCRIPT_NAME"); }

   /** Get the query string for this request.
   The query string follows the ? in the URI which called this application.
   This is usually only valid for scripts called with the GET method.
   For example, in the string foo.cgi?cgicc=yes the query string is cgicc=yes
   */
   UString getQueryString() const { return getenv("QUERY_STRING"); }

   /** Get the length of the data read from standard input, in chars.
   This is usually only valid for scripts called with the POST method
   */
   long getContentLength() const { return getenv("CONTENT_LENGTH").strtol(); }

   /** Get the content type of the submitted information.
   For applications called via the GET method, this information is irrelevant.
   For applications called with the POST method, this is specifies the MIME type
   of the information, usually application/x-www-form-urlencoded or as specified by Content-Type
   */
   UString getContentType() const { return getenv("CONTENT_TYPE"); }

   /** Get the data passed to the CGI application via standard input. This data is of MIME type getContentType()
   */
   UString getPostData() const;

   // ==============================================================

   // =====================================================================================
   // Server Specific Information - Information dependent on the type of HTTP server in use
   // =====================================================================================

   /** Get the URL of the page which called this CGI application.
   Depending on the HTTP server software, this value may not be set
   */
   UString getReferrer() const { return getenv("HTTP_REFERER"); }

   // =====================================================================================

   // ===========================================================================
   // Remote User Information - Information about the user making the CGI request
   // ===========================================================================

   /** Get the hostname of the remote machine making this request
   This may be either an IP address or a hostname
   */
   UString getRemoteHost() const { return getenv("REMOTE_HOST"); }

   /** Get the IP address of the remote machine making this request
   This is a standard IP address of the form 123.123.123.123
   */
   UString getRemoteAddr() const { return getenv("REMOTE_ADDR"); }

   /** Get the protocol-specific user authentication method used.
   This is only applicable if the server supports user authentication, and the user has authenticated
   */
   UString getAuthType() const { return getenv("AUTH_TYPE"); }

   /** Get the authenticated remote user name.
   This is only applicable if the server supports user authentication, and the user has authenticated
   */
   UString getRemoteUser() const { return getenv("REMOTE_USER"); }

   /** Get the remote user name retrieved from the server.
   This is only applicable if the server supports RFC 931 identification. This variable should only be
   used for logging purposes. see RFC 1431 at http://info.internet.isi.edu:80/in-notes/rfc/files/rfc1413.txt
   */
   UString getRemoteIdent() const { return getenv("REMOTE_IDENT"); }

   /** Get the MIME data types accepted by the client's browser.
   For example image/gif, image/x-xbitmap, image/jpeg, image/pjpeg
   */
   UString getAccept() const { return getenv("HTTP_ACCEPT"); }

   /** Get the name of the browser used for this CGI request.
   For example: Mozilla/5.0 (X11; U; Linux 2.4.0 i686; en-US; 0.8.1) Gecko/20010421
   */
   UString getUserAgent() const { return getenv("HTTP_USER_AGENT"); }

   // ===========================================================================

   // ====================================================================================================================
   // ErrorDocument Handling - For a tutorial on ErrorDocument handling, see http://hoohoo.ncsa.uiuc.edu/cgi/ErrorCGI.html
   // ====================================================================================================================

   /** Get the redirect request.
   This will only be valid if you are using this script as a script to use in place of the default server messages
   */
   UString getRedirectRequest() const { return getenv("REDIRECT_REQUEST"); }

   /** Get the redirect URL.
   This will only be valid if you are using this script as a script to use in place of the default server messages
   see http://hoohoo.ncsa.uiuc.edu/docs/setup/srm/ErrorDocument.html
   */
   UString getRedirectURL() const { return getenv("REDIRECT_URL"); }

   /** Get the redirect status.
   This will only be valid if you are using this script as a script to use in place of the default server messages
   */
   UString getRedirectStatus() const { return getenv("REDIRECT_STATUS"); }

   // ====================================================================================================================

   // DEBUG

#ifdef DEBUG
   const char* dump(bool reset) const;
#endif

protected:
   UCgiInput* input;
};

#endif
