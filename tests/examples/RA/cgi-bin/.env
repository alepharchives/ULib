#!/bin/sh

set_ENV() {

	# global var
	BASE_NAME=$(basename $1 .sh)

	if [ -n "$HTTP_ACCEPT_LANGUAGE" -a -d ../form/$HTTP_ACCEPT_LANGUAGE ]; then
		FORM_FILE_DIR=../form/$HTTP_ACCEPT_LANGUAGE
	else
		FORM_FILE_DIR=../form/en
	fi

	DEVICE="hpaio:/usb/HP_LaserJet_3055?serial=00CNCK343927" # Obtain device name from scanimage -L

	export BASE_NAME FORM_FILE_DIR TMP_FORM_FILE SET_COOKIE SCAN_DIR DEVICE

	# directory to put image scanned, etc...
	SCAN_DIR=../scan

	if [ -n "$HTTP_COOKIE" ]; then
		SCAN_DIR=$SCAN_DIR/$HTTP_COOKIE/$BASE_NAME
	fi

	# paginazione
	export NUM_START NUM_END NUM_DOC FOR_PAGE pagina_corrente link_paginazione
}

write_OUTPUT() {

	if [ -n "$1" ]; then

		if [ -n "$SET_COOKIE" ]; then

			# REQ: Set-Cookie: TODO[ data expire path domain secure HttpOnly ]
			# ----------------------------------------------------------------------------------------------------------------------------
			# string -- Data to put into the cookie         -- must
			# int    -- Lifetime of the cookie in HOURS     -- must (0 -> valid until browser exit)
			# string -- Path where the cookie can be used   --  opt
			# string -- Domain which can read the cookie    --  opt
			# bool   -- Secure mode                         --  opt
			# bool   -- Only allow HTTP usage               --  opt
			# ----------------------------------------------------------------------------------------------------------------------------
			# RET: Set-Cookie: ulib_sid=data&expire&HMAC-MD5(data&expire); expires=expire(GMT); path=path; domain=domain; secure; HttpOnly

			echo "Set-Cookie: TODO[ $SET_COOKIE 24 ]"

		fi

		echo -e "Content-Type: text/html; charset=iso-8859-1\r\n\r"
		echo -n -E "$1"

		exit 0

	fi
}

view_form_input() {

	# eventuali dati pre form input

	TMP_FORM_FILE=/tmp/$BASE_NAME.prev

	load_value_session

	if [ "$BASE_NAME" = "registrazione-business" ]; then

		# --------------------------------------
		# value to skip: (input type select)
		# --------------------------------------
		# "contratto_profilo	= $v23"
		# --------------------------------------

		printf -v OUTPUT "`cat $FORM_FILE_DIR/$BASE_NAME.tmpl`" \
							  "$v1" "$v2" "$v3" "$v4" "$v5" "$v6" "$v7" "$v8" "$v9" "${v10}" "${v11}" "${v12}" "${v13}" "${v14}" \
							  "${v15}" "${v16}" "${v17}" "${v18}" "${v19}" "${v20}" "${v21}" "${v22}"          "${v24}"

	else

		# --------------------------------------
		# value to skip: (input type select)
		# --------------------------------------
		# "dati_utente_sesso					= $v5"
		# "dati_utente_tipo_di_documento = $v11"
		# --------------------------------------

		printf -v OUTPUT "`cat $FORM_FILE_DIR/$BASE_NAME.tmpl`" \
							  "$v2" "$v1" "$v3" "$v4"    "$v6" "$v7" "$v8" "$v9" "${v10}"    "${v12}" \
							  "${v13}" "${v14}" "${v15}" "${v16}" "${v17}" "${v18}" "${v19}" "${v20}" "${v21}" "${v22}" "${v24}"

	fi
}

load_value_session() {

	if [ -f $TMP_FORM_FILE ]; then

		i=0
		while read LINE
		do
			eval v$i=\"$LINE\"

			let "i = i + 1"
		done < $TMP_FORM_FILE

	fi
}

save_value_session() {

	cat <<END >$TMP_FORM_FILE
$1
$2
$3
$4
$5
$6
$7
$8
$9
${10}
${11}
${12}
${13}
${14}
${15}
${16}
${17}
${18}
${19}
${20}
${21}
${22}
${23}
${24}
${25}
${26}
${27}
END
}

visualizza_contratto() {

	# set session cookie

	if [ -z "$HTTP_COOKIE" ]; then
		SET_COOKIE=SESSION_$$
		HTTP_COOKIE=$SET_COOKIE
		SCAN_DIR=$SCAN_DIR/$HTTP_COOKIE/$BASE_NAME
	fi

	mkdir -p $SCAN_DIR

	FORM_STAMPA="`cat $FORM_FILE_DIR/stampa.js`"
	FORM_1="`cat $FORM_FILE_DIR/contratto-privacy.html`"
##	FORM_2="`cat $FORM_FILE_DIR/contratto-privacy.html`"
	FORM_2="`cat $FORM_FILE_DIR/contratto-informativa.html`"
##	FORM_1="`cat $FORM_FILE_DIR/contratto-informativa.html`"

	if [ ! -f $SCAN_DIR/page1.tiff ]; then
		DISABLE='disabled="1"'
	fi

	printf -v FORM_BOTTONI "`cat $FORM_FILE_DIR/contratto-bottoni.tmpl`" $BASE_NAME $DISABLE $DISABLE

	TMP_FORM_FILE=$SCAN_DIR/$BASE_NAME.curr

	FORM_FILE="`cat $FORM_FILE_DIR/contratto-$BASE_NAME.tmpl`"

	if [ "$BASE_NAME" = "registrazione-business" ]; then

		# --------------------------------------
		# value to skip
		# --------------------------------------
		# "cn				= $11"
		# "email_altro = $12"
		# --------------------------------------

		if [ $# -eq 25 ]; then

			printf -v OUTPUT "$FORM_FILE" "$FORM_STAMPA" \
								  "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}" \
								  "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" "${23}" "${24}" \
								  "$FORM_1" "$FORM_2" "$FORM_BOTTONI"

			save_value_session "" "$@"

		elif [ $# -eq 0 ]; then

			load_value_session

			printf -v OUTPUT "$FORM_FILE" "$FORM_STAMPA" \
								  "$v1" "$v2" "$v3" "$v4" "$v5" "$v6" "$v7" "$v8" "$v9" "${v10}" \
								  "${v13}" "${v14}" "${v15}" "${v16}" "${v17}" "${v18}" "${v19}" "${v20}" "${v21}" "${v22}" "${v23}" "${v24}" \
								  "$FORM_1" "$FORM_2" "$FORM_BOTTONI"
		fi
	else
		if [ $# -eq 25 ]; then

			printf -v OUTPUT "$FORM_FILE" "$FORM_STAMPA" \
								  "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}" \
								  "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" \
								  "$FORM_1" "$FORM_2" "$FORM_BOTTONI"

			save_value_session "" "$@" "" ""

		elif [ $# -eq 0 ]; then

			load_value_session

			printf -v OUTPUT "$FORM_FILE" "$FORM_STAMPA" \
								  "$v1" "$v2" "$v3" "$v4" "$v5" "$v6" "$v7" "$v8" "$v9" "${v10}" "${v11}" "${v12}" \
								  "${v13}" "${v14}" "${v15}" "${v16}" "${v17}" "${v18}" "${v19}" "${v20}" "${v21}" "${v22}" \
								  "$FORM_1" "$FORM_2" "$FORM_BOTTONI"
		fi
	fi
}

visualizza_rid() {

	FORM_STAMPA="`cat $FORM_FILE_DIR/stampa.js`"

	printf -v FORM_BOTTONI "`cat $FORM_FILE_DIR/rid-bottoni.tmpl`" $BASE_NAME

	TMP_FORM_FILE=$SCAN_DIR/$BASE_NAME.curr

	load_value_session

	CODICE_FISCALE=$(eval "echo \$$(echo v${1})")

	printf -v OUTPUT "`cat $FORM_FILE_DIR/rid.tmpl`" "$FORM_STAMPA" "$2" $CODICE_FISCALE "$FORM_BOTTONI"
}

errore_scansione() {

	if [ "$BASE_NAME" = "registrazione-business" ]; then
		TIPO="BUSINESS"
	else
		TIPO="RESIDENZIALE CON CPE"
	fi

	printf -v OUTPUT "`cat $FORM_FILE_DIR/error.tmpl`" "$TIPO" "$DEVICE" "`scanimage -L 2>/dev/null`" $BASE_NAME
}

# ---------------------------------------------------------------------------------------------
# scanimage --help -d $DEVICE
# ---------------------------------------------------------------------------------------------
# Options specific to device `net:ra-station:hpaio:/usb/HP_LaserJet_3055?serial=00CNCK343927':
#  Scan mode:
#    --mode Lineart|Gray|Color [Color]
#        Selects the scan mode (e.g., lineart, monochrome, or color).
#    --resolution 75|100|150|200|300|600|1200dpi [75]
#        Sets the resolution of the scanned image.
#  Advanced:
#    --contrast 0..100 [inactive]
#        Controls the contrast of the acquired image.
#    --compression None|JPEG [JPEG]
#        Selects the scanner compression method for faster scans, possibly at
#        the expense of image quality.
#    --jpeg-quality 0..100 [10]
#        Sets the scanner JPEG compression factor. Larger numbers mean better
#        compression, and smaller numbers mean better image quality.
#    --batch-scan[=(yes|no)] [no]
#        Enables continuous scanning with automatic document feeder (ADF).
#    --source Auto|ADF [Auto]
#        Selects the scan source (such as a document-feeder).
#  Geometry:
#    --length-measurement Unknown|Unlimited|Approximate|Padded [Padded]
#        Selects how the scanned image length is measured and reported, which
#        is impossible to know in advance for scrollfed scans.
#    -l 0..228.6mm [0]
#        Top-left x position of scan area.
#    -t 0..381mm [0]
#        Top-left y position of scan area.
#    -x 0..228.6mm [228.6]
#        Width of scan-area.
#    -y 0..381mm [381]
#        Height of scan-area.
# ---------------------------------------------------------------------------------------------
# X=210
# Y=297
# SCANMODE=Lineart
# --------------------------------------------------
# RESOLUTION=75
# --------------------------------------------------
# 72K prova.tiff
# 20K prova.pdf
# 16K prova.png
# X=210 Y=297 Image Width: 621 Image Length: 876
#
# 96K prova.tiff
# 20K prova.pdf
# 20K prova.png
# X=228.6 Y=381 Image Width: 640 Image Length: 1125
# --------------------------------------------------
# RESOLUTION=200
# --------------------------------------------------
# 480K prova.tiff
#  64K prova.pdf
#  40K prova.png
# X=210 Y=297 Image Width: 1654 Image Length: 2338
# --------------------------------------------------
# RESOLUTION=300
# --------------------------------------------------
# 1.1M prova.tiff
#  76K prova.pdf
#  60K prova.png
# X=210 Y=297 Image Width: 2481 Image Length: 3507
# --------------------------------------------------
# RESOLUTION=600
# --------------------------------------------------
# 4.2M prova.tiff
# 84K  prova.pdf
# 56K  prova.png
# X=210 Y=297 Image Width: 4961 Image Length: 7015
# --------------------------------------------------

rascan_image() {

	# 75|100|150|200|300|600|1200dpi [75]
	RESOLUTION=$1

	# A4
	X=210
	Y=297

	# 1-bit multipage TIFF
	SCANMODE=Lineart

	rm -f $SCAN_DIR/*.tiff $SCAN_DIR/*.png

	# use automatic document feeder (ADF) in your scanner to scan multi-page document and save the result it in a single PDF file
	scanimage -d $DEVICE --format=tiff --mode $SCANMODE --resolution $RESOLUTION -x $X -y $Y --batch="$SCAN_DIR/page%d.tiff" \
				 --batch-scan=yes --source ADF >/dev/null 2>&1

	NUM_DOC=`ls -f $SCAN_DIR/page[0-9]*.tiff 2>/dev/null | wc -l`

	if [ $NUM_DOC -eq 0 ]; then
		errore_scansione
	else
		TMP_FORM_FILE=$SCAN_DIR/$BASE_NAME.curr

		load_value_session
		save_value_session $NUM_DOC \
								 "$v1" "$v2" "$v3" "$v4" "$v5" "$v6" "$v7" "$v8" "$v9" "${v10}" "${v11}" "${v12}" "${v13}" "${v14}" "${v15}" \
								 "${v16}" "${v17}" "${v18}" "${v19}" "${v20}" "${v21}" "${v22}" "${v23}" "${v24}" "${v25}"

		FOR_PAGE=1

		set_paginazione 1

		view_page
	fi
}

view_page() {

	if [ ! -f $SCAN_DIR/page$pagina_corrente.tiff ]; then
		errore_scansione
	fi

	if [ ! -f $SCAN_DIR/page$pagina_corrente.png ]; then
		fax2png $SCAN_DIR/page$pagina_corrente.tiff $SCAN_DIR/page$pagina_corrente.png -w 621 -a >/dev/null 2>&1 # Create the page PNG file
	fi

	if [ -f $SCAN_DIR/page$pagina_corrente.png ]; then
		printf -v OUTPUT "`cat $FORM_FILE_DIR/view.tmpl`" $SCAN_DIR/page$pagina_corrente.png $BASE_NAME "$link_paginazione"
	fi
}

view_page_prepare() {

	TMP_FORM_FILE=$SCAN_DIR/$BASE_NAME.curr

	load_value_session

	FOR_PAGE=1
	NUM_DOC=$v0

	if [ -z "$NUM_DOC" ]; then

		NUM_DOC=`ls -f $SCAN_DIR/page[0-9]*.tiff 2>/dev/null | wc -l`

		save_value_session $NUM_DOC \
								 "$v1" "$v2" "$v3" "$v4" "$v5" "$v6" "$v7" "$v8" "$v9" "${v10}" "${v11}" "${v12}" "${v13}" "${v14}" "${v15}" \
								 "${v16}" "${v17}" "${v18}" "${v19}" "${v20}" "${v21}" "${v22}" "${v23}" "${v24}" "${v25}"
	fi
}

view_page_image() {

	view_page_prepare

	set_paginazione $1

	view_page
}

registrazione_contratto() {

	TMP_FORM_FILE=$SCAN_DIR/$BASE_NAME.curr

	load_value_session

	# create PDF...

	tiffcp -a $SCAN_DIR/page[0-9]*.tiff $SCAN_DIR/out.tiff >/dev/null 2>&1

	tiff2pdf -p A4 -q 100 -j $SCAN_DIR/out.tiff >$SCAN_DIR/out.pdf		2>/dev/null  # Creating PDF file...
	PDF=`openssl base64							  -in $SCAN_DIR/out.pdf -e 2>/dev/null` # ...and convert in base64

	# directory to put mail to send...

	cd ../mail

	DIR_SESSION=$HTTP_COOKIE/$BASE_NAME

	mkdir -p $DIR_SESSION

	if [ "$BASE_NAME" = "registrazione-business" ]; then

		printf "`cat mail-business.tmpl`" "$v1" "$v2" "$v3" "$v4" "$v5" "$v6" "$v7" "$v8" "$v9" "${v10}" "${v11}" "${v12}" "${v13}" "${v14}" \
													 "${v15}" "${v16}" "${v17}" "${v18}" "${v19}" "${v20}" "${v21}" "${v22}" "${v23}" "${v24}" \
													 "$PDF" > $DIR_SESSION/send_to_$$.eml

	else

		printf "`cat mail-cpe.tmpl`" "$v1" "$v2" "$v3" "$v4" "$v5" "$v6" "$v7" "$v8" "$v9" "${v10}" "${v11}" "${v12}" \
											  "${v13}" "${v14}" "${v15}" "${v16}" "${v17}" "${v18}" "${v19}" "${v20}" "${v21}" "${v22}" "${v24}" \
											  "$PDF" > $DIR_SESSION/send_to_$$.eml

	fi

	./sendmsg.sh $DIR_SESSION $$ >/dev/null 2>&1 &

	sleep 2

	if [ -f $DIR_SESSION/send_to_$$.p7m ]; then
		rm -rf $SCAN_DIR/*.tiff $SCAN_DIR/*.png $SCAN_DIR/*.pdf
	fi

	# goto main menu...

#	echo "Set-Cookie: TODO[]" # delete cookie
	echo -e "Location: /RA\r\n\r"

	exit 0
}

# funzioni che creano i link alle pagine dei risultati
# ----------------------------------------------------

crea_link() {

	if [ "$pagina_corrente" = "$1" ]; then
		ADD="<span class=\"pnow\">$1</span>"
	else
		ADD="<a href=\"?page=$1\" class=\"pnum\">$1</a>"
	fi

	link_paginazione=$link_paginazione$ADD" "
}

set_paginazione() {

	pagina_corrente=$1

	if [ $NUM_DOC -le $FOR_PAGE ]; then

		if [ $NUM_DOC -eq 0 ]; then
			NUM_START=0
		else
			NUM_START=1
		fi

		NUM_END=$NUM_DOC

 		link_paginazione="<span class=\"void\">PREV</span><span class=\"void\">NEXT</span>"

		return

	fi

	let "pagina_precedente = $pagina_corrente - 1"
	let "pagina_successiva = $pagina_corrente + 1"

	let "tot_pagine = $NUM_DOC / $FOR_PAGE"
	let "resto		 = $NUM_DOC % $FOR_PAGE"

	if [ $resto -ne 0 ]; then
		let "tot_pagine = $tot_pagine + 1"
	fi

	let "ultima_pagina = $tot_pagine - 1"
	let "penultima_pagina = $ultima_pagina - 1"

	# link alla pagina precedente

	if [ $pagina_corrente -eq 1 ]; then
		NUM_START=1

 		link_paginazione="<span class=\"void\">PREV</span> "
	else
		let "NUM_START = 1 + $pagina_precedente * $FOR_PAGE"

 		link_paginazione="<a href=\"?page=$pagina_precedente\" class=\"pnum\">PREV</a> "
	fi

	# mostriamo sempre il link alla prima pagina

	crea_link 1

	# se il prossimo link non è alla seconda pagina aggiungo dei puntini ... oppure la sola pagina mancante

	if [ $pagina_precedente -gt 2 ]; then

		if [ $pagina_precedente -eq 3 ]; then
			crea_link 2
		else
			link_paginazione=$link_paginazione" ... "
		fi

	fi

	# creo i link alla pagina corrente ed a quelle ad essa vicine

	for (( i=$pagina_precedente; i<=$pagina_successiva; i+=1 )); do

		# se tra quelle vicine c'è la prima pagina (già riportata)

		if [ $i -lt 2 ]; then
			continue
		fi

		# se tra quelle vicine c'è l'ultima pagina (che mostrerò con le prossime istruzioni)

		if [ $i -gt $ultima_pagina ]; then
			continue
		fi

		crea_link $i
	done

	# se il precedente link non era alla penultima pagina aggiungo dei puntini ... oppure la sola pagina mancante

	if [ $pagina_successiva -lt $ultima_pagina ]; then

		if [ $pagina_successiva -eq $penultima_pagina ]; then
			crea_link $ultima_pagina
		else
			link_paginazione=$link_paginazione" ... "
		fi

	fi

	# mostriamo il link all'ultima pagina se questa non coincide con la prima

	if [ $tot_pagine -ne 1 ]; then
		crea_link $tot_pagine
	fi

	# link alla pagina successiva

	if [ $pagina_corrente -eq $tot_pagine ]; then
		NUM_END=$NUM_DOC

		link_paginazione=$link_paginazione"<span class=\"void\">NEXT</span>"
	else
		let "NUM_END = $NUM_START + $FOR_PAGE - 1"

		link_paginazione=$link_paginazione"<a href=\"?page=$pagina_successiva\" class=\"pnum\">NEXT</a>"
	fi
}

# ------------------------------------------------------
