#!/bin/bash

# .admin

view_menu_admin() {

	BASE_NAME=admin

	print_page "$@"
}

view_menu_statistics() {

	BASE_NAME=statistics

	print_page "$@" "$BACK_TAG"
}

view_recovery() {

	print_page $BASE_NAME "$BACK_TAG"
}

confirm_recovery() {

	BASE_NAME=confirm_page

	print_page "Conferma recovery" "Conferma recovery" "$1" "execute_recovery" "$1" "$BACK_TAG"
}

view_user() {

	print_page $BASE_NAME "$BACK_TAG"
}

execute_recovery() {

	# $1 -> uid

	ask_to_LDAP ldapsearch "-LLL -b $WIAUTH_USER_BASEDN $LDAP_USER_PARAM" "waUid=$1" dn:

	if [ -z "$OUTPUT" ]; then
		message_page "Recovery utente: utente non registrato" "Recovery utente: $1 non registrato!"
	fi

	USER_DN=`echo "$OUTPUT" | cut -f2 -d':' 2>/dev/null`

	ask_to_LDAP ldapsearch "-LLL -b $WIAUTH_CARD_BASEDN $LDAP_CARD_PARAM" "waPin=$1" dn:

	if [ -z "$OUTPUT" ]; then
		message_page "Errore recovery utente" "Errore recovery utente: $1 (card)"
	fi

	CARD_DN=`echo "$OUTPUT" | cut -f2 -d':' 2>/dev/null`

	get_user_context_connection $1

	if [ -n "$AP" ]; then
		ask_nodog_to_logout_user
	fi

	ask_to_LDAP ldapdelete "$LDAP_CARD_PARAM" "$CARD_DN"

	if [ $EXIT_VALUE -ne 0 ]; then
		message_page "Errore" "Errore recovery: fallita cancellazione utente $1 (ldap branch card)"
	fi

	ask_to_LDAP ldapdelete "$LDAP_USER_PARAM" "$USER_DN"

	if [ $EXIT_VALUE -ne 0 ]; then
		message_page "Errore" "Errore recovery: fallita cancellazione utente $1 (ldap branch user)"
	fi

	rm -f $DIR_CTX/"$1".ctx $DIR_STAT/"$1".* $DIR_CNT/$POLICY/"$1".* $DIR_REG/"$1".reg

	logger -p $LOCAL_SYSLOG_SELECTOR "$PORTAL_NAME: $BASE_NAME: User <$1> recovered"

	BACK_TAG="<a href=\"/admin\">TORNA AL MENU</a>"

	message_page "Esito recovery" "Recovery completato!"
}

print_user_data() {

#	set -x

	# $1 -> uid

	BASE_NAME=print_user_data

	ask_to_LDAP ldapsearch "-LLL -b $WIAUTH_USER_BASEDN $LDAP_USER_PARAM" "waUid=$1"

	if [ -z "$OUTPUT" ]; then
		message_page "Visualizzazione dati utente: utente non registrato" "Visualizzazione dati utente: $1 non registrato!"
	fi

	WA_ACTIVE=`echo "$OUTPUT" | awk '/^waActive/{print $2}' 2>/dev/null`
	WA_UID=`echo "$OUTPUT"	  | awk '/^waUid/{print $2}'	  2>/dev/null`
	WA_CELL=`echo "$OUTPUT"   | awk '/^waCell/{print $2}'	  2>/dev/null`

	ask_to_LDAP ldapsearch "-LLL -b $WIAUTH_CARD_BASEDN $LDAP_CARD_PARAM" "waUsedBy=$1"

	if [ -z "$OUTPUT" ]; then
		message_page "Visualizzazione dati utente: utente non attivato" "Visualizzazione dati utente: $1 non attivato!"
	fi

	WA_CID=`echo "$OUTPUT"		 | awk '/^waCid/{print $2}'		2>/dev/null`
	WA_PIN=`echo "$OUTPUT"	    | awk '/^waPin/{print $2}'		2>/dev/null`
	WA_CARDID=`echo "$OUTPUT"   | awk '/^waCardId/{print $2}'	2>/dev/null`
	WA_REVOKED=`echo "$OUTPUT"  | awk '/^waRevoked/{print $2}'  2>/dev/null`
	WA_VALIDITY=`echo "$OUTPUT" | awk '/^waValidity/{print $2}' 2>/dev/null`
	WA_LOGIN=`echo "$OUTPUT"	 | awk '/^waLogin/{print $2}'		2>/dev/null`
	WA_PASSWORD=`echo "$OUTPUT" | awk '/^waPassword/{print $2}' 2>/dev/null`
	WA_USEDBY=`echo "$OUTPUT"	 | awk '/^waUsedBy/{print $2}'	2>/dev/null`
	WA_NOTAFTER=`echo "$OUTPUT" | awk '/^waNotAfter/{print $2}' 2>/dev/null`

	YEAR=`echo ${WA_NOTAFTER:0:4}`
	MONTH=`echo ${WA_NOTAFTER:4:2}`
	DAY=`echo ${WA_NOTAFTER:6:2}`
	HOUR=`echo ${WA_NOTAFTER:8:2}`
	MINUTES=`echo ${WA_NOTAFTER:10:2}`

	if [ -s $DIR_CNT/$POLICY/$1.timeout ]; then

		REMAINING_TIME=`cat $DIR_CNT/$POLICY/$1.timeout`

		# expressing the time in minutes
		REMAINING_TIME_MIN=`expr $REMAINING_TIME / 60`
	else
		REMAINING_TIME_MIN="Non disponibile"
	fi

	if [ -s $DIR_CNT/$POLICY/$1.traffic ]; then

		REMAINING_TRAFFIC=`cat $DIR_CNT/$POLICY/$1.traffic`

		# expressing the traffic in MB 1024*1024=1048576
		REMAINING_TRAFFIC_MB=`expr $REMAINING_TRAFFIC / 1048576`
	else
		REMAINING_TRAFFIC_MB="Non disponibile"
	fi

	if [ -z "$WA_NOTAFTER" ]; then
		WA_NOTAFTER="Non disponibile"
	else
		WA_NOTAFTER="$DAY/$MONTH/$YEAR - $HOUR:$MINUTES"
	fi

	REVOKED=NO

	if [ "$WA_REVOKED" = "TRUE" ]; then
		REVOKED=SI
	fi

	print_page $1 "$REMAINING_TIME_MIN" "$REMAINING_TRAFFIC_MB" $WA_PASSWORD "$WA_NOTAFTER" $WA_VALIDITY $REVOKED $WA_CID "$BACK_TAG"

#	set +x
}

get_status_ap() {

#	set -x

	# $1 -> gateway
	# $2 -> ap

	# we request the status of the indicated gateway...
	# -----------------------------------------------------------------------------
	# NB: we need PREFORK_CHILD > 2
	# -----------------------------------------------------------------------------
	GATEWAY=$1

	send_request_to_nodog "http://$GATEWAY/status" $DIR_STAT/$2.html

#	set +x

	echo -e "X-Sendfile: wi-auth/stat/$2.html\r\n\r"

	exit 0
}

get_status_network() {

#	set -x

	# --------------------------------------------------------------------------------------------
	# NB: bisogna metterlo in cron (5 minuti)...
	# --------------------------------------------------------------------------------------------
	# get_users_info
	# --------------------------------------------------------------------------------------------

	# stefano 055340773 10.30.1.131:5280 00:e0:4c:d4:63:f5 10.30.1.105

	cat $DIR_CTX/*.ctx 2>/dev/null | sort >/tmp/wi-auth.stat 2>/dev/null

	BODY=`cat $FORM_FILE_DIR/${BASE_NAME}_body.tmpl 2>/dev/null`

	while read AP UUID GATEWAY MAC IP
	do

		RIGA=`printf "$BODY" $UUID $IP $MAC $PROT $HTTP_HOST $GATEWAY $AP $AP 2>/dev/null`

		OUTPUT=`echo "$OUTPUT"; echo "$RIGA" 2>/dev/null`

	done < /tmp/wi-auth.stat

	NUM_USERS=`wc -l < /tmp/wi-auth.stat 2>/dev/null`
	NUM_ACCESS_POINT=`wc -l < $ACCESS_POINT_LIST 2>/dev/null`

	TMP1=`cat $FORM_FILE_DIR/${BASE_NAME}_head.tmpl 2>/dev/null`
	TMP2=`date`
	TMP3=`printf "$TMP1" "$TMP2" $NUM_ACCESS_POINT $NUM_USERS 2>/dev/null`

	    write_FILE "$TMP3"																	$DIR_STAT/network.html
	append_to_FILE "$OUTPUT"																$DIR_STAT/network.html
	append_to_FILE "`cat $FORM_FILE_DIR/${BASE_NAME}_end.tmpl 2>/dev/null`" $DIR_STAT/network.html

	echo -e "X-Sendfile: wi-auth/stat/network.html\r\n\r"

#	set +x

	exit 0
}

print_LOG() {

	echo -e "Content-Type: text/plain; charset=us-ascii\r\n\r\n"

	if [ -s $FILE_LOG ]; then

		# 2009/11/07 13:14:35 op: PASS_AUTH, uid: 3397363258, ap: dev, ip: 10.30.1.105, mac: 00:e0:4c:d4:63:f5, timeout: 86400, traffic: 300

		awk '
		{
		for (f = 1 ; f <= NF ; f++)
			{
			row[NR,f] = $f

			l = length($f) ; if (l > max[f]) max[f] = l
			}

		if (NF > maxNF) maxNF = NF
		}

		END {
			for (r = (NR > 200 ? NR : 201) - 200 ; r <= NR ; r++)
				for (f = 1 ; f <= maxNF ; f++)
					printf "%-*s%s",
									 (max[f] > 999 ? 999 : max[f]),
						(length(row[r,f]) > 999 ? substr(row[r,f], 1, 999 -3) "..." : row[r,f]),
						(f < maxNF ? " " : "\n")
		}
		' < $FILE_LOG

	fi

	exit 0
}

view_statistics_login() {

export TABLE_TAG_START="<table class=\"centered\" border=\"1\">"
export TABLE_TAG_END="</table>"
export TR_TAG_START="<tr>"
export TR_TAG_END="</tr>"
export TD_HEADER_TAG_START="<td class=\"header_smaller\">"
export TD_HEADER_ALIGNED_TAG_START="<td class=\"header_smaller\" align=\"right\">"
export TD_DATA_TAG_START="<td class=\"data_smaller\" align=\"right\">"
export TD_TAG_END="</td>"
export TH_TAG_START="<th class=\"header_smaller\">"
export TH_TAG_END="</th>"

COMMAND=cat

if [ -n "$1" ]; then
	COMMAND=$UNCOMPRESS_COMMAND_HISTORICAL_LOGS
	FILE_LOG=$HISTORICAL_LOG_DIR/$1
fi

TABLE=`$COMMAND $FILE_LOG | awk '
	BEGIN {

		trTagStart=ENVIRON["TR_TAG_START"];
		trTagEnd=ENVIRON["TR_TAG_END"];

		tdTagHeaderStart=ENVIRON["TD_HEADER_TAG_START"];
		tdTagHeaderAlignedStart=ENVIRON["TD_HEADER_ALIGNED_TAG_START"];

		tdTagDataStart=ENVIRON["TD_DATA_TAG_START"];

		tdTagEnd=ENVIRON["TD_TAG_END"];

		thTagStart=ENVIRON["TH_TAG_START"];
		thTagEnd=ENVIRON["TH_TAG_END"];

		printf "%s\n", ENVIRON["TABLE_TAG_START"];
	}

	/LOGIN/ { a=$8; gsub(",","",a) ; login[a $1]+=1 ; login[a]+=1 ; login[$1]+=1 ; if (!date[$1]) date[$1]+=1 ; if (!ap[a]) ap[a]+=1 }

	END {
		n=asorti(date, sorted_date);

		printf "\t%s\n\t\t%s%s%s\n", trTagStart, thTagStart, thTagEnd, "" ; 

		for (i = 1; i <= n; i++) {
			printf "\t\t%s%s%s\n", thTagStart, sorted_date[i], thTagEnd 
		} 

		printf "\t\t%s%s%s\n", thTagStart, "Totale x AP", thTagEnd 

		printf "\t%s\n", trTagEnd


		for (j in ap) { 

			printf "\t%s\n\t\t%sAP %s%s\n", trTagStart, tdTagHeaderStart, j, tdTagEnd

			for (i = 1; i <= n; i++) {
				printf "\t\t%s%.0f%s\n", tdTagDataStart, login[j sorted_date[i]], tdTagEnd
			}

			printf "\t\t%s%.0f%s\n", tdTagHeaderAlignedStart, login[j], tdTagEnd

			printf "\t%s\n", trTagEnd
		}


		printf "\t%s\n\t\t%sTotale x data%s\n", trTagStart, tdTagHeaderStart, tdTagEnd

		for (i = 1; i <= n; i++) {
			printf "\t\t%s%.0f%s\n", tdTagHeaderAlignedStart, login[sorted_date[i]], tdTagEnd
			totale+=login[sorted_date[i]]
		}

		printf "\t\t%s%.0f%s\n", tdTagHeaderAlignedStart, totale, tdTagEnd

		printf "\t%s\n", trTagEnd


		printf "%s\n", ENVIRON["TABLE_TAG_END"];
	}
'`

	BASE_NAME=view_statistics

	HREF_TAG="/export_statistics_login_as_csv"
	TITLE="Numero LOGIN per Access Point"

	if [ -n "$1" ]; then
		HREF_TAG="$HREF_TAG?file=$1"
		TITLE="Numero LOGIN per Access Point: file $1"
	fi

	EXPORT_CSV_TAG="<a class=\"back\" href=\"$HREF_TAG\">Esporta in formato CSV</a>"
	print_page "$TITLE" "$TITLE" "$TABLE" "$BACK_TAG" "$EXPORT_CSV_TAG"
}

view_statistics_registration() {

	export TABLE_TAG_START="<table class=\"centered\" border=\"1\">"
	export TABLE_TAG_END="</table>"
	export TR_TAG_START="<tr>"
	export TR_TAG_END="</tr>"
	export TD_HEADER_TAG_START="<td class=\"header_smaller\">"
	export TD_DATA_TAG_START="<td class=\"data_smaller\" align=\"right\">"
	export TD_TAG_END="</td>"
	export TH_TAG_START="<th class=\"header_smaller\">"
	export TH_TAG_END="</th>"

TABLE=`LDAP_search "-LLL -b $WIAUTH_CARD_BASEDN $LDAP_CARD_PARAM" "waNotAfter=*" waNotAfter | awk '
	BEGIN {

		trTagStart=ENVIRON["TR_TAG_START"];
		trTagEnd=ENVIRON["TR_TAG_END"];

		tdTagHeaderStart=ENVIRON["TD_HEADER_TAG_START"];
		tdTagDataStart=ENVIRON["TD_DATA_TAG_START"];

		tdTagEnd=ENVIRON["TD_TAG_END"];

		thTagStart=ENVIRON["TH_TAG_START"];
		thTagEnd=ENVIRON["TH_TAG_END"];

		printf "%s\n", ENVIRON["TABLE_TAG_START"];
	}

	/^waNotAfter/ { 
		year=substr($2, 0 , 4); 

		month=substr($2, 5 , 2); 

		day=substr($2, 7 , 2); 

		hour=substr($2, 9 , 2); 

		minutes=substr($2, 11 , 2); 

		seconds=substr($2, 13 , 2); 

		expire_date=year" "month" "day" "hour" "minutes" "seconds;
		# print expire_date;

		expire_date_in_seconds = mktime(expire_date);

		# print expire_date_in_seconds;

		validity=180*60*60*24;

		date=expire_date_in_seconds-validity;

		# print date;

		date_formatted = strftime("%Y/%m/%d", date);

		# print date_formatted;

		registrations[date_formatted]+=1;
		total+=1;

	}

	END {

		n=asorti(registrations, sorted_registrations);

		printf "\t%s\n", trTagStart;
		printf "\t\t%s\n", thTagStart;
		printf "\t\t\t%s\n", "Data";
		printf "\t\t%s\n", thTagEnd;
		printf "\t\t%s\n", thTagStart;
		printf "\t\t\t%s\n", "Registrazioni";
		printf "\t\t%s\n", thTagEnd;
		printf "\t%s\n", trTagEnd;

		for (i = 1; i <= n; i++) {
			printf "\t%s\n", trTagStart;

			printf "\t\t%s\n", tdTagDataStart;
			printf "\t\t\t%s\n", sorted_registrations[i];
			printf "\t\t%s\n", tdTagEnd;

			printf "\t\t%s\n", tdTagDataStart;
			printf "\t\t\t%.0f\n", registrations[sorted_registrations[i]];
			printf "\t\t%s\n", tdTagEnd;

			printf "\t%s\n", trTagEnd;
		}


		printf "\t%s\n", trTagStart;

		printf "\t\t%s\n", tdTagDataStart;
		printf "\t\t\t%s\n", "Totale";
		printf "\t\t%s\n", tdTagEnd;

		printf "\t\t%s\n", tdTagDataStart;
		printf "\t\t\t%.0f\n", total;
		printf "\t\t%s\n", tdTagEnd;

		printf "\t%s\n", trTagEnd;

		printf "%s\n", ENVIRON["TABLE_TAG_END"];
	}
'`

	BASE_NAME=view_statistics

	HREF_TAG="/export_statistics_registration_as_csv"
	TITLE="Numero Registrazioni per data"

	EXPORT_CSV_TAG="<a class=\"back\" href=\"$HREF_TAG\">Esporta in formato CSV</a>"
	print_page "$TITLE" "$TITLE" "$TABLE" "$BACK_TAG" "$EXPORT_CSV_TAG"
}

historical_statistics_login() {

#	set -x

	TABLE_TAG_START="<table class=\"centered\" border=\"1\">"
	TABLE_TAG_END="</table>"
	TR_TAG_START="<tr>"
	TR_TAG_END="</tr>"
	TD_HEADER_TAG_START="<td class=\"header_smaller\">"
	TD_DATA_TAG_START="<td class=\"data_smaller\" align=\"right\">"
	TD_TAG_END="</td>"
	TH_TAG_START="<th class=\"header_smaller\">"
	TH_TAG_END="</th>"
	URL_TAG_START="<a href=\"/view_statistics_login?file=%s\">%s</a>"

	file_list_as_table() {

		printf "$TABLE_TAG_START\n"

		printf "\t$TH_TAG_START\n"
		printf "\t\tARCHIVI"
		printf "\t$TH_TAG_END\n"

		for file in `ls -rt $HISTORICAL_LOG_DIR/$REGEX_HISTORICAL_LOGS`
		do
			printf "\t$TR_TAG_START\n"
			printf "\t\t$TD_DATA_TAG_START\n"
			filename=`basename $file`
			TAG=`printf "$URL_TAG_START" $filename $filename`
			printf "\t\t\t$TAG\n"
			printf "\t\t$TD_TAG_END\n"
			printf "\t$TR_TAG_END\n"
		done

		printf "$TABLE_TAG_END\n"

	}

	TABLE=`file_list_as_table`

	BASE_NAME=historical_statistics_login
	print_page "Storico" "Storico" "$TABLE" "$BACK_TAG"
}

export_statistics_as_csv() {

	echo -e "Content-Type: text/csv; charset=us-ascii\r\n"

COMMAND=cat

if [ -n "$1" ]; then
	COMMAND=$UNCOMPRESS_COMMAND_HISTORICAL_LOGS
	FILE_LOG="$HISTORICAL_LOG_DIR/$1"
fi

CSV_OUTPUT=`$COMMAND $FILE_LOG | awk '
	/LOGIN/ { a=$8; gsub(",","",a) ; login[a $1]+=1 ; if (!date[$1]) date[$1]+=1 ; if (!ap[a]) ap[a]+=1 }

	END {
		n=asorti(date, sorted_date);

		printf "\"\","; 
		
		for (i = 1; i <= n; i++) {
			printf "\"%s\",", sorted_date[i] 
		}; 
		
		printf "\n"
		
		for (j in ap) { 

			printf "\"AP %s\",", j
			
			for (i = 1; i <= n; i++) {
				printf "%.0f,", login[j sorted_date[i]] 
			}

			printf "\n"
		}
	}
'`

	echo -n "$CSV_OUTPUT"

	exit 0;
}

export_statistics_registration_as_csv() {

	echo -e "Content-Type: text/csv; charset=us-ascii\r\n"

 	ask_to_LDAP ldapsearch "-LLL -b $WIAUTH_CARD_BASEDN $LDAP_CARD_PARAM" "waNotAfter=*" waNotAfter

CSV_OUTPUT=`echo "$OUTPUT" | awk '
	/^waNotAfter/ { 
		year=substr($2, 0 , 4); 

		month=substr($2, 5 , 2); 

		day=substr($2, 7 , 2); 

		hour=substr($2, 9 , 2); 

		minutes=substr($2, 11 , 2); 

		seconds=substr($2, 13 , 2); 

		expire_date=year" "month" "day" "hour" "minutes" "seconds;
		# print expire_date;

		expire_date_in_seconds = mktime(expire_date);

		# print expire_date_in_seconds;

		validity=180*60*60*24;

		date=expire_date_in_seconds-validity;

		# print date;

		date_formatted = strftime("%Y/%m/%d", date);

		# print date_formatted;

		registrations[date_formatted]+=1;
		total+=1;

	}

	END {

		n=asorti(registrations, sorted_registrations);

		printf "\"%s\"", "Data";
		printf ",";
		printf "\"%s\"", "Registrazioni";
		printf "\n";

		for (i = 1; i <= n; i++) {

			printf "\"%s\"", sorted_registrations[i];
			printf ",";
			printf "%.0f", registrations[sorted_registrations[i]];
			printf "\n";
		}

		printf "\"%s\"", "Totale";
		printf ",";
		printf "%.0f", total;
		printf "\n";

	}
'`

	echo -n "$CSV_OUTPUT"

	exit 0;
}

export ADMIN_CONTEXT="true"

DIR_REQ=../../wi-auth/request
DIR_CTX=../../wi-auth/login
DIR_CNT=../../wi-auth/counter
DIR_REG=../../wi-auth/registration
DIR_STAT=../../wi-auth/stat
DIR_POLICY=../../wi-auth/policy

PROT=https

load_policy
