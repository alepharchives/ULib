#!/bin/sh

. ../.function

## tsa_https.test -- Test TSA feature

start_msg tsa_https

#UTRACE="0 5M 0"
#UOBJDUMP="0 100k 10"
#USIMERR="error.sim"
#VALGRIND=valgrind
 export UTRACE UOBJDUMP USIMERR VALGRIND

rm -rf tsa_https.log TSA/log \
		 out/userver_ssl.out err/userver_ssl.err \
       trace.*userver_ssl*.[0-9]* object.*userver_ssl*.[0-9]*

# usage: openssl s_client args
# ----------------------------------------------------------------
# -host host    - use -connect instead
# -port port    - use -connect instead
# -connect host:port - who to connect to (default is localhost:4433)
# -verify arg   - turn on peer certificate verification
# -cert arg     - certificate file to use, PEM format assumed
# -key arg      - Private key file to use, PEM format assumed, in cert file if not specified but cert file is.
# -CApath arg   - PEM format directory of CA's
# -CAfile arg   - PEM format file of CA's
# -reconnect    - Drop and re-make the connection with the same Session-ID
# -pause        - sleep(1) after each read(2) and write(2) system call
# -showcerts    - show all certificates in the chain
# -debug        - extra output
# -msg          - Show protocol messages
# -nbio_test    - more ssl protocol testing
# -state        - print the 'ssl' states
# -nbio         - Run with non-blocking IO
# -crlf         - convert LF from terminal into CRLF
# -quiet        - no s_client output
# -ign_eof      - ignore input eof (default when -quiet)
# -ssl2         - just use SSLv2
# -ssl3         - just use SSLv3
# -tls1         - just use TLSv1
# -no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
# -bugs         - Switch on all SSL implementation bug workarounds
# -serverpref   - Use server's cipher preferences (only SSLv2)
# -cipher       - preferred cipher to use, use the 'openssl ciphers' command to see what is available
# -starttls prot - use the STARTTLS command before starting TLS for those protocols that support it, where 'prot'
#						 defines which one to assume.  Currently, only "smtp" and "pop3" are supported.
# -engine id    - Initialise and use the specified engine
# -rand file:file:...
# ----------------------------------------------------------------

CAPATH="../ulib/CA/CApath"
CACERT="../ulib/CA/username.crt"
USER_KEY="../ulib/CA/username.key"
LCMD="$OPENSSL s_client -no_ssl2 -quiet -cert $CACERT -key $USER_KEY -pass pass:caciucco -CApath $CAPATH -verify 0 -connect localhost:443"

DIR_CMD="../../examples/userver"

# set -x

#STRACE=$TRUSS
start_prg_background userver_ssl -c tsa_https.cfg
$SLEEP

rm -f TSA/response/response*

#../../tmp/openssl/ssl/misc/tsget -h https://localhost:443/tsa -C TSA/request/cacert.pem TSA/request/tsq.req
$LCMD <TSA/request/http.req >TSA/response/response 2>>err/tsa_https.err

tail -c +142 TSA/response/response > TSA/response/response.tsr

TSA/bin/openssl ts -verify -queryfile TSA/request/tsq.req \
						 -in TSA/response/response.tsr -CApath TSA/CA/CApath > out/tsa_https.out

rm -f TSA/response/response*

#../../tmp/openssl/ssl/misc/tsget -h https://localhost:443/tsa -C TSA/request/cacert.pem TSA/request/tsq.req
$LCMD <TSA/request/http.req >TSA/response/response 2>>err/tsa_https.err

tail -c +142 TSA/response/response > TSA/response/response.tsr

$SLEEP
kill_prg userver_ssl TERM

mv err/userver_ssl.err err/tsa_https.err

TSA/bin/openssl ts -verify -queryfile TSA/request/tsq.req \
						 -in TSA/response/response.tsr -CApath TSA/CA/CApath >> out/tsa_https.out

# Test against expected output
test_output_diff tsa_https
