#!/bin/sh /etc/rc.common
#
# lg's changelog:
#
#	2012/12/08: no openvpn: publiciface: tun0 -> eth0
#
#	2012/12/05: x86 rtc fix: wait for date greater equal 2012
#
#	2012/11/22: start() waits for process to be started
#	2012/11/22: conffile(), pidfile()... now are errors tolerant
#
#	2012/11/21: reiterate portal conf get
#	2012/11/21: try using pidfile first, _pgrep otherwise
#	2012/11/21: _pgrep() busybox ps 52 chars max workaround
#
#	2012/10/08: stop(): SIGTERM first, SIGKILL otherwise
#
#	2012/10/05: stop file, to stop waiting
#	2012/10/05: _pgrep() skip me update
#
#	2012/10/04: wait for public ip and use it as key, if undefined
#	2012/10/04: strip()
#

START=90
STOP=39

#export UTRACE="-0 10M 0"
#export UOBJDUMP="0 100k 10"
#export USIMERR="error.sim"
 export DIR_LOG_GZ=/tmp
 export UMEMPOOL=180,50,0,0,250,0,0,0,72

descr=nodog

stopfile=/tmp/nodog.stop

cmdline='/usr/sbin/userver_tcp -c /etc/nodog.conf'

## automagically from cmdline
#
conffile() { expr "$*" : '.*-c[ 	]\([^ 	]*\)' || echo unknown ; }
pidfile()  { awk '/^[ \t]*PID_FILE[ \t]/ { print $2 }' `conffile $*` 2> /dev/null ; }
outfile()  { echo /tmp/`basename \`conffile $*\` .conf`.out ; }   ### .conf
errfile()  { echo /tmp/`basename \`conffile $*\` .conf`.err ; }   ### .conf


 publiciface=tun0
#publiciface=eth0
 portalfile=/etc/nodog.portal
    keyfile=/etc/nodog.key

strip() { echo -n "`$* 2> /dev/null`" ; }

portalconfget() { /usr/sbin/uclient -c /etc/uclient.conf \
	"http://`strip cat $1`/get_config?ap=`strip uname -n`&key=`strip cat $2`" \
		2>> /tmp/uclient.err ; }
	
portalconffile=/tmp/nodog.conf.portal


## you should't need to put your beloved hands below
#

log() { logger -st "$descr" -- $* ; }

running() { local pid ; pid=`cat "$1" 2> /dev/null` && kill -0 $pid 2> /dev/null && echo $pid ; }

_pgrep() { local pids=`{ ps -efw || ps -w ; } 2> /dev/null | awk '         
	### skip me ###                                                    
	NR == 1 { pid=($1 == "PID" ? 1 : 2) ; next }                       
	match($0, "### skip me ###") { next }                              
	match($0, "'"${*:0:52}"'") { print $pid }'` ; test "$pids" && echo $pids ; }
	                   #                                                        
	                   ## busybox ps prints out 52 chars max cmdlines ...

start() { {
	log starting
	
	rm -f $stopfile

	## let's wait for date
	#
	until test `date '+%Y'` -ge 2012 ; do
		test -f $stopfile && return
		log 'waiting for date ...' ; sleep 3 ; done
	
	## let's wait for public ip ...
	#
	local publicip ; until publicip=`ifconfig $publiciface 2> /dev/null |
		awk '/inet addr:/ { sub("inet addr:", "") ; print $1 }'` && test $publicip ; do
			test -f $stopfile && return
			log "waiting for public ip ($publiciface) ..." ; sleep 3 ; done
	
	## ... and use it as key, if undefined
	#
	test ! -f $keyfile -o "`cat $keyfile 2> /dev/null`" = undefined &&
		echo $publicip > $keyfile


	local pidfile=`pidfile $cmdline` pids ; pids=`running "$pidfile"` ||
		pids=`_pgrep "$cmdline"` && {
			log "'$cmdline' is ALREADY running ($pids)." ; return 1 ; }

	## let's reiterate conf get
	#
	until { portalconfget $portalfile $keyfile > $portalconffile ; sleep 3 ; } &&
		test -s $portalconffile ; do
			test -f $stopfile && return
			log "reiterating conf get (`cat $portalfile` `cat $keyfile`) ..." ; done
	
	local outfile=`outfile $cmdline`
	local errfile=`errfile $cmdline`
		$cmdline >> $outfile 2>> $errfile &
	
	## let's wait for process to be started
	#
	until sleep 3 && pidfile=`pidfile $cmdline` && pids=`running "$pidfile"` ; do
		test -f $stopfile && return
		log "still waiting for '$cmdline' to be started ..." ; done

	log "'$cmdline' started ($pids)." ; } & }

stop() {
	log stopping
	
	## just in case start is still waiting
	#
	date > $stopfile
	
	local pidfile=`pidfile $cmdline` pids ; pids=`running "$pidfile"` ||
		pids=`_pgrep "$cmdline"` || {
			log "'$cmdline' is NOT running." ; return 1 ; }
		
	log "stopping '$cmdline' ($pids)"

	kill -TERM $pids   ### SIGTERM first ...

	sleep 3 ; pids=`running "$pidfile"` ||
		pids=`_pgrep "$cmdline"` && {
			log "'$cmdline' is STILL running ($pids), sending SIGKILL"
			kill -KILL $pids ; }   ### ... SIGKILL otherwise

	log "'$cmdline' stopped." ; }

restart() {
	stop ; sleep 3 ; start ; }
