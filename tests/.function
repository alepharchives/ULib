#!/bin/sh

# trap "exit 0" 1 2 6 15
mkdir -p out err tmp

. ../.colors

#UTRACE="0 10M 0"
#UOBJDUMP="0 500k 500"
#USIMERR="error.sim"
#EXEC_ON_EXIT="/utility/stack_dump.sh"
#WINELOADER=wine
#VALGRIND=valgrind
TRUSS="strace -f -s 100"
LTRUSS="ltrace -f -S --demangle -n 3"
#STRACE="$LTRUSS"
export UTRACE UOBJDUMP USIMERR EXEC_ON_EXIT VALGRIND WINELOADER TRUSS LTRUSS STRACE PID RESULT

# context

if [ "$TERM" = "cygwin" ]; then
	NC=nc
	SYNC=sync
	CURL=curl
	SLEEP="sleep 3"
	OPENSSL=openssl
elif [ "$TERM" = "msys" ]; then
	SUFFIX=".exe"
	SLEEP="sleep 3"
	NC=/c/cygwin/bin/nc.exe
	SYNC=/c/cygwin/bin/sync.exe
	CURL=/c/cygwin/bin/curl.exe
	OPENSSL=/c/cygwin/bin/openssl.exe
	if [ -x /mingw/bin/openssl.exe ]
	then
		OPENSSL=/mingw/bin/openssl.exe
	else
		OPENSSL=/c/cygwin/bin/openssl.exe
	fi
else
	SYNC=sync
	CURL=curl
	SLEEP="sleep 1"
	OPENSSL=openssl

	type nc >/dev/null 2>&1

	if [ $? -eq 0 ]; then
		NC_TEST=`nc -h 2>&1 | head -n 1`

      if [ "$NC_TEST" = "[v1.10]" ]; then
			NC=nc
		fi
	else
		type netcat >/dev/null 2>&1

		if [ $? -eq 0 ]; then
			NC_TEST=`netcat -h 2>&1 | head -n 1`

			if [ "$NC_TEST" = "[v1.10]" ]; then
				NC=netcat
			fi
		fi
	fi

	if [ -z "$NC" ]; then
		NC=../nc-static
	fi
fi

if [ -z "$WINELOADER" ]; then
	export WINE_OPENSSL="$OPENSSL"
else
	SUFFIX=".exe"
	export WINE_OPENSSL="wine /usr/i686-pc-mingw32/sys-root/mingw/bin/openssl.exe"
fi

export NC SYNC CURL OPENSSL SLEEP SUFFIX

# function : CApath_rehash
CApath_rehash() {

	cd CA/CApath
#	if [ "$TERM" = "msys" ]; then
#		mv cacert.pem 						02d518e4.0  >/dev/null 2>/dev/null
#		mv server_cert.pem 				eb5837e7.0  >/dev/null 2>/dev/null
#		mv user1_cert.pem 				dffce256.0  >/dev/null 2>/dev/null
#		mv user2_cert.pem 				587a7086.0  >/dev/null 2>/dev/null
#		mv crl_with_user1_revoked.pem 02d518e4.r0 >/dev/null 2>/dev/null
#		mv ca_sub_crl.pem 				2caa674a.r0 >/dev/null 2>/dev/null
#		mv luigi_cert.pem 				298b9ba0.0  >/dev/null 2>/dev/null
#		mv ca_root_crl.pem 				1bd9bd82.r0 >/dev/null 2>/dev/null
#		mv ca_sub_cert.pem 				2caa674a.0  >/dev/null 2>/dev/null
#		mv matteo_cert.pem 				9003168b.0  >/dev/null 2>/dev/null
#		mv ca_root_cert.pem 				1bd9bd82.0  >/dev/null 2>/dev/null
#		mv leonardo_cert.pem 			43962c66.0  >/dev/null 2>/dev/null
#		mv ca_selfsigned_crl.pem 		6dc6fd02.r0 >/dev/null 2>/dev/null
#		mv ca_selfsigned_cert.pem 		6dc6fd02.0  >/dev/null 2>/dev/null
#	else
		../../c_rehash . >/dev/null 2>/dev/null
#	fi
	cd ../..
}

# function : start_msg
start_msg() {

	$NORMAL
	$ECHO "=== Running test "
	$WARNING
	$ECHO $1.test
	$NORMAL
	echo

	if [ -n "$2" ]; then
		PARAM="$2"
	else
		PARAM="$1"
	fi

	rm -f trace.*$PARAM*.[0-9]* \
		   object.*$PARAM*.[0-9]* \
		   stack_dump.*$PARAM*.[0-9]* \
		   dmalloc.$PARAM.[0-9]* \
			out/$PARAM.out* \
			err/$PARAM.err*
}

export DIR_CMD

# function : test_prg
test_prg() {

	if [ -z "$DIR_CMD" ]; then
		DIR_CMD=../../examples/$1
	fi

	if [ -x "./test_$1$SUFFIX" ]; then
		# tests

		PRG=test_$1
		CMD="./$PRG$SUFFIX"

	elif [ -x "$DIR_CMD/$1$SUFFIX" ]; then
		# examples

		PRG=$1
		CMD="$DIR_CMD/$PRG$SUFFIX"

	elif [ -x "../src/$1$SUFFIX" ]; then
		# application

		PRG=$1
		CMD="../src/$PRG$SUFFIX"

	else
		# user

		PRG=$1
		CMD="$DIR_CMD/$PRG$SUFFIX"
	fi

	shift
	CMD="$CMD $*"

	export PRG CMD
}

# function : start_prg
start_prg() {

	test_prg "$@"

	if [ -n "$STRACE" -a "$STRACE" = "$LTRUSS" ]; then
		CMD=".libs/$CMD"
		export LD_LIBRARY_PATH=../../src/ulib/.libs
	fi

	eval $VALGRIND $WINELOADER $STRACE $CMD >>out/$1.out 2>>err/$1.err

	RESULT=$?
}

# function : start_prg_background
start_prg_background() {

	test_prg "$@"

	PID=`( eval "$VALGRIND $WINELOADER $STRACE $CMD >>out/$1.out 2>>err/$1.err &"; echo $! )`

	$SLEEP
}

# function : start_cmd
start_cmd() {

	test_prg "$@"

	( eval "$VALGRIND $CMD >>out/$1.out 2>>err/$1.err" ) 2>/dev/null

	RESULT=$?
}

# function : start_cmd_background
start_cmd_background() {

	PID=`( eval "$* &"; echo $! )`

	$SLEEP
}

# function : wait_prg
wait_prg() {

	wait $PID 2>/dev/null

	unset PID
}

# function : kill_cmd
kill_cmd() {

	if [ -n "$PID" ]; then
		kill -0 $PID >/dev/null 2>/dev/null && kill -s $1 $PID && return 1
	fi

	return 0
}

# function : kill_prg
kill_prg() {

	kill_cmd $2 && wait_prg

	if [ -n "$WINELOADER" ]; then
		pkill $1 2>/dev/null
	fi
}

# function : post_processing
post_processing() {

	if [ -z "$RESULT" ]; then
		RESULT=$?
	fi

	if [ -n "$2" ]; then
		FILE_OUT="$2"
	else
		FILE_OUT="out/$1.out"
	fi

#	mv $FILE_OUT $FILE_OUT.tmp

#	if [ -z "$WINELOADER" ]
#	then
#		grep -v "^$PRG: DEBUG MODE\|^$PRG: SIMERR\|^$PRG: OBJDUMP\|^$PRG: TRACE" $FILE_OUT.tmp 			  >$FILE_OUT
#	else
#		grep -v "^$PRG: DEBUG MODE\|^$PRG: SIMERR\|^$PRG: OBJDUMP\|^$PRG: TRACE" $FILE_OUT.tmp | dos2unix >$FILE_OUT
#	fi

	export FILE_OUT

	if [ -n "$3" ]; then
		FILE_OK="$3"
	else
		FILE_OK="ok/$1.ok"
	fi

	if [ ! -f $FILE_OK ]; then
		cp $FILE_OUT $FILE_OK 
	fi

	export FILE_OK

	$SYNC # nfs delay...
}

# function : test_output
test_output() {

	if [ "$RESULT" = "0" ] && [ "$1" = "$2" ]; then
		$SUCCESS
		kill_cmd TERM
 		exit 0
	else
		echo "RESULT = $RESULT"
		if [ "$RESULT" = "0" ]; then
			echo "N1     = $1"
			echo "N2     = $2"
		fi
		$FAILURE
		kill_cmd TERM
		exit 1
	fi
}

# function : test_output_diff
test_output_diff() {

	post_processing $1 $2 $3

	N1=`diff -bB $FILE_OK $FILE_OUT`

	test_output "$N1"
}

# function : test_output_wc
test_output_wc() {

	post_processing $2 $3 $4

	N1=`cat $FILE_OK  | wc -$1 2>/dev/null`
	N2=`cat $FILE_OUT | wc -$1 2>/dev/null`

	test_output "$N1" "$N2"
}
